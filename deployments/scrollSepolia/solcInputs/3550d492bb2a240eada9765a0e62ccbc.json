{
  "language": "Solidity",
  "sources": {
    "contracts/Other/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\ninterface IERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n"
    },
    "contracts/Staking/StakingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\nimport \"../Other/interfaces/IERC20.sol\";\r\n\r\n// - Rewards user for staking their tokens\r\n// - User can withdraw and deposit\r\n// - Earns token while withdrawing\r\n\r\n/// rewards are calculated with reward rate and time period staked for\r\n\r\ncontract StakingPool {\r\n    // tokens intialized\r\n    IERC20 public rewardsToken;\r\n    IERC20 public stakingToken;\r\n\r\n    // 100 wei per second , calculated for per anum\r\n    uint256 public rewardRate = 100;\r\n\r\n    uint256 public lastUpdateTime;\r\n    uint256 public rewardPerTokenStored;\r\n\r\n    // mapping for the rewards for an address\r\n    mapping(address => uint256) public rewards;\r\n\r\n    // mapping for the rewards per token paid\r\n    mapping(address => uint256) public rewardsPerTokenPaid;\r\n\r\n    // mapping for staked amount by an address\r\n    mapping(address => uint256) public staked;\r\n\r\n    // total supply for the staked token in the contract\r\n    uint256 public _totalSupply;\r\n\r\n    constructor(address _stakingToken, address _rewardsToken) {\r\n        stakingToken = IERC20(_stakingToken);\r\n        rewardsToken = IERC20(_rewardsToken);\r\n    }\r\n\r\n    /// @dev - to calculate the amount of rewards per token staked at current instance\r\n    /// @return uint - the amount of rewardspertoken\r\n    function rewardPerToken() public view returns (uint256) {\r\n        if (_totalSupply == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n        return\r\n            rewardPerTokenStored +\r\n            (((block.timestamp - lastUpdateTime) * rewardRate * 1e18) /\r\n                _totalSupply);\r\n    }\r\n\r\n    /// @dev - to calculate the earned rewards for the token staked\r\n    /// @param account - for which it is to be calculated\r\n    /// @return uint -  amount of earned rewards\r\n    function earned(address account) public view returns (uint256) {\r\n        /// amount will be the earned amount according to the staked + the rewards the user earned earlier\r\n        return\r\n            ((staked[account] *\r\n                (rewardPerToken() - rewardsPerTokenPaid[account])) / 1e18) +\r\n            rewards[account];\r\n    }\r\n\r\n    /// modifier that will calculate the amount every time the user calls , and update them in the rewards array\r\n    modifier updateReward(address account) {\r\n        rewardPerTokenStored = rewardPerToken();\r\n        lastUpdateTime = block.timestamp;\r\n\r\n        /// updating the total rewards owned by the user\r\n        rewards[account] = earned(account);\r\n        /// updatig per token reward amount in the mapping\r\n        rewardsPerTokenPaid[account] = rewardPerTokenStored;\r\n        _;\r\n    }\r\n\r\n    /// @dev to stake some amount of token\r\n    /// @param _amount -  amount to be staked\r\n    function stake(uint256 _amount, address user) external updateReward(user) {\r\n        _totalSupply += _amount;\r\n        staked[user] += _amount;\r\n\r\n        ///  need approval\r\n        stakingToken.transferFrom(user, address(this), _amount);\r\n    }\r\n\r\n    /// @dev to withdraw the staked amount\r\n    /// @param _amount - amount to be withdrawn\r\n    function withdraw(uint256 _amount, address user)\r\n        external\r\n        updateReward(user)\r\n    {\r\n        _totalSupply -= _amount;\r\n        staked[user] -= _amount;\r\n        stakingToken.transfer(user, _amount);\r\n    }\r\n\r\n    /// @dev to withdraw the reward token\r\n    function reedemReward(address user) external updateReward(msg.sender) {\r\n        uint256 reward = rewards[user];\r\n        rewards[user] = 0;\r\n        rewardsToken.transfer(user, reward);\r\n    }\r\n}\r\n"
    },
    "contracts/Staking/StakingPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\nimport \"./StakingPool.sol\";\r\n\r\ncontract StakingPoolFactory {\r\n    /// The address supposed to get the protocol fee\r\n    address public feeTo;\r\n\r\n    /// address that can set the address\r\n    address public feeToSetter;\r\n\r\n    ///  mapping from Token => Pool address\r\n    mapping(address => address) public getPool;\r\n    address[] public allPools;\r\n\r\n    event PoolCreated(address indexed token, address pool, uint256 timeStamp);\r\n\r\n    constructor(address _feeToSetter) {\r\n        feeToSetter = _feeToSetter;\r\n    }\r\n\r\n    function allPoolsLength() external view returns (uint256) {\r\n        return allPools.length;\r\n    }\r\n\r\n    function createPool(address stoken, address rtoken)\r\n        external\r\n        returns (address)\r\n    {\r\n        require(stoken != address(0), \"ZERO_ADDRESS\");\r\n        require(getPool[stoken] == address(0), \"PAIR_EXISTS\");\r\n\r\n        StakingPool _pool = new StakingPool(stoken, rtoken);\r\n\r\n        getPool[stoken] = address(_pool);\r\n        allPools.push(address(_pool));\r\n        emit PoolCreated(stoken, address(_pool), block.timestamp);\r\n        return address(_pool);\r\n    }\r\n\r\n    function setFeeTo(address _feeTo) external {\r\n        require(msg.sender == feeToSetter, \"FORBIDDEN\");\r\n        feeTo = _feeTo;\r\n    }\r\n\r\n    function setFeeToSetter(address _feeToSetter) external {\r\n        require(msg.sender == feeToSetter, \"FORBIDDEN\");\r\n        feeToSetter = _feeToSetter;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 5000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}