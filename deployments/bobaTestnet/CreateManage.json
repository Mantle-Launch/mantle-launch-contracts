{
  "address": "0x703690CEc0F0A742225500449C51841af8bc28B1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "router_Addr",
          "type": "address"
        },
        {
          "internalType": "contract StandardTokenFactory",
          "name": "_standardTokenFactory",
          "type": "address"
        },
        {
          "internalType": "contract LiquidityTokenFactory",
          "name": "_liquidityTokenFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "CreateStandardSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "InitFeeSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "OwnerWithdrawSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "createLiquditySuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "setOwnerSucess",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reciever",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimal_",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "settingflag",
          "type": "uint256"
        },
        {
          "internalType": "uint256[4]",
          "name": "fees",
          "type": "uint256[4]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "mintflag",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pauseflag",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "burnflag",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blacklistflag",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.status",
          "name": "_state",
          "type": "tuple"
        }
      ],
      "name": "createLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals_",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "tokenSupply_",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "mintflag",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pauseflag",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "burnflag",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blacklistflag",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.status",
          "name": "_state",
          "type": "tuple"
        }
      ],
      "name": "createStandard",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "normal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "burn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pause",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blacklist",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deflation",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creater",
          "type": "address"
        }
      ],
      "name": "getCreatedToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "normal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "burn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pause",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blacklist",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deflation",
              "type": "uint256"
            }
          ],
          "internalType": "struct CreateManage.feeInfo",
          "name": "_fee",
          "type": "tuple"
        }
      ],
      "name": "initFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownerWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newowner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x353b291dc1636a67c7a3943d345eb9c807ee655683982d9d5e42522736d8375f",
  "receipt": {
    "to": null,
    "from": "0xDeAdA90a7B242FC396eB277717a31e67A6005c93",
    "contractAddress": "0x703690CEc0F0A742225500449C51841af8bc28B1",
    "transactionIndex": 0,
    "gasUsed": "2691214",
    "logsBloom": "0x
    "blockHash": "0xa70ad79205e0d72fd6534f27410b29812a7513a3a41e67bd2a9e3e4b54d8f065",
    "transactionHash": "0x353b291dc1636a67c7a3943d345eb9c807ee655683982d9d5e42522736d8375f",
    "logs": [],
    "blockNumber": 123635,
    "cumulativeGasUsed": "2691214",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDeAdA90a7B242FC396eB277717a31e67A6005c93",
    "0x4df04E20cCd9a8B82634754fcB041e86c5FF085A",
    "0x88d9565Fbd6C0599A84b23233437e6d2428F4018",
    "0xAdb5047623dDe3535fdb91811aaEce731f2574C9"
  ],
  "solcInputHash": "e0d08e14952bc7ca068be5a2359cf66e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router_Addr\",\"type\":\"address\"},{\"internalType\":\"contract StandardTokenFactory\",\"name\":\"_standardTokenFactory\",\"type\":\"address\"},{\"internalType\":\"contract LiquidityTokenFactory\",\"name\":\"_liquidityTokenFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"CreateStandardSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InitFeeSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OwnerWithdrawSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"createLiquditySuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setOwnerSucess\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reciever\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimal_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settingflag\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"fees\",\"type\":\"uint256[4]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mintflag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pauseflag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnflag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blacklistflag\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.status\",\"name\":\"_state\",\"type\":\"tuple\"}],\"name\":\"createLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenSupply_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mintflag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pauseflag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnflag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blacklistflag\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.status\",\"name\":\"_state\",\"type\":\"tuple\"}],\"name\":\"createStandard\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"normal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pause\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blacklist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deflation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creater\",\"type\":\"address\"}],\"name\":\"getCreatedToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"normal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pause\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blacklist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deflation\",\"type\":\"uint256\"}],\"internalType\":\"struct CreateManage.feeInfo\",\"name\":\"_fee\",\"type\":\"tuple\"}],\"name\":\"initFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CreateToken/Meter/CreateVerify.sol\":\"CreateManage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/CreateToken/Meter/CreateVerify.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./SharedStructs.sol\\\";\\nimport \\\"./StandardToken.sol\\\";\\nimport \\\"./LiquidityToken.sol\\\";\\nimport \\\"./StandardTokenFactory.sol\\\";\\nimport \\\"./LiquidityTokenFactory.sol\\\";\\n\\ncontract CreateManage {\\n    struct feeInfo {\\n        uint256 normal;\\n        uint256 mint;\\n        uint256 burn;\\n        uint256 pause;\\n        uint256 blacklist;\\n        uint256 deflation;\\n    }\\n\\n    address public owner;\\n\\n    // address factory_address;\\n    address router_address;\\n\\n    mapping(address => address[]) tokens;\\n\\n    feeInfo public fee;\\n    StandardTokenFactory internal standardTokenFactory;\\n    LiquidityTokenFactory internal liquidityTokenFactory;\\n\\n    event OwnerWithdrawSuccess(uint256 value);\\n    event CreateStandardSuccess(address);\\n    event setOwnerSucess(address);\\n    event createLiquditySuccess(address);\\n    event InitFeeSuccess();\\n\\n    // constructor(address _owner, address factory_addr, address router_Addr) {\\n    constructor(\\n        address _owner,\\n        address router_Addr,\\n        StandardTokenFactory _standardTokenFactory,\\n        LiquidityTokenFactory _liquidityTokenFactory\\n    ) {\\n        owner = _owner;\\n\\n        // factory_address = factory_addr;\\n        router_address = router_Addr;\\n\\n        standardTokenFactory = _standardTokenFactory;\\n        liquidityTokenFactory = _liquidityTokenFactory;\\n    }\\n\\n    function setOwner(address newowner) public {\\n        require(msg.sender == owner, \\\"Only manager can do it\\\");\\n        owner = newowner;\\n        emit setOwnerSucess(owner);\\n    }\\n\\n    function ownerWithdraw() public {\\n        require(msg.sender == owner, \\\"Only manager can withdraw\\\");\\n        address payable reciever = payable(owner);\\n        reciever.transfer(address(this).balance);\\n        // owner.transfer(address(this).balance);\\n        emit OwnerWithdrawSuccess(address(this).balance);\\n    }\\n\\n    function initFee(feeInfo memory _fee) public {\\n        fee = _fee;\\n        emit InitFeeSuccess();\\n    }\\n\\n    function calcFee(SharedStructs.status memory _state)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalfee = fee.normal;\\n\\n        if (_state.mintflag > 0) {\\n            totalfee = totalfee + fee.mint;\\n        }\\n\\n        if (_state.burnflag > 0) {\\n            totalfee = totalfee + fee.burn;\\n        }\\n\\n        if (_state.pauseflag > 0) {\\n            totalfee = totalfee + fee.pause;\\n        }\\n\\n        if (_state.blacklistflag > 0) {\\n            totalfee = totalfee + fee.blacklist;\\n        }\\n\\n        return totalfee;\\n    }\\n\\n    /*\\n     * @notice Creates a new Presale contract and registers it in the PresaleFactory.sol.\\n     */\\n\\n    function createStandard(\\n        address creator_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_,\\n        uint256 tokenSupply_,\\n        SharedStructs.status memory _state\\n    ) public payable {\\n        require(msg.value >= calcFee(_state), \\\"Balance is insufficent\\\");\\n\\n        StandardToken token = standardTokenFactory.deploy(\\n            creator_,\\n            name_,\\n            symbol_,\\n            decimals_,\\n            tokenSupply_,\\n            _state\\n        );\\n\\n        tokens[address(creator_)].push(address(token));\\n\\n        emit CreateStandardSuccess(address(token));\\n    }\\n\\n    function createLiquidity(\\n        address creator_,\\n        address reciever,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimal_,\\n        uint256 supply,\\n        uint256 settingflag,\\n        uint256[4] memory fees,\\n        SharedStructs.status memory _state\\n    ) public payable {\\n        require(msg.value >= calcFee(_state), \\\"Balance is insufficent\\\");\\n\\n        LiquidityToken token = liquidityTokenFactory.deploy(\\n            router_address,\\n            creator_,\\n            reciever,\\n            name_,\\n            symbol_,\\n            decimal_,\\n            supply\\n        );\\n        token.setFee(settingflag, fees);\\n        token.setStatus(_state);\\n        tokens[creator_].push(address(token));\\n\\n        emit createLiquditySuccess(address(token));\\n    }\\n\\n    function getBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function getCreatedToken(address creater)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        return tokens[address(creater)];\\n    }\\n}\\n\",\"keccak256\":\"0x98e3d820d97f012574c73313353ccbcde8f1780591c2e099a33dd1cea91d9eb3\",\"license\":\"MIT\"},\"contracts/CreateToken/Meter/LiquidityToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./SharedStructs.sol\\\";\\nimport \\\"../../interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../../interfaces/IUniswapV2Factory.sol\\\";\\n\\ncontract LiquidityToken is Context, IERC20 {\\n    using Address for address;\\n\\n    address payable public marketingAddress; // Marketing Address\\n    address public immutable deadAddress =\\n        0x000000000000000000000000000000000000dEaD;\\n    address public owner;\\n    address private manager;\\n    mapping(address => uint256) private _rOwned;\\n    mapping(address => uint256) private _tOwned;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    mapping(address => bool) private _isExcludedFromFee;\\n\\n    mapping(address => bool) private _isExcluded;\\n    address[] private _excluded;\\n\\n    uint256 private constant MAX = type(uint256).max;\\n    uint256 private _tTotal;\\n    uint256 private _rTotal;\\n    uint256 private _tFeeTotal;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    bool private _paused;\\n    SharedStructs.status public state;\\n\\n    mapping(address => bool) _blacklist;\\n\\n    uint256 public _taxFee;\\n    uint256 private _previousTaxFee;\\n\\n    uint256 public _liquidityFee;\\n    uint256 private _previousLiquidityFee;\\n\\n    uint256 public marketingDivisor;\\n\\n    uint256 public _maxTxAmount = 5000000 * 10**6 * 10**9;\\n    uint256 private minimumTokensBeforeSwap = 300000 * 10**6 * 10**9;\\n    uint256 private buyBackUpperLimit = 1 * 10**18;\\n\\n    IUniswapV2Router02 public immutable UniswapRouter;\\n    address public immutable UniswapPair;\\n\\n    bool inSwapAndLiquify;\\n    bool public swapAndLiquifyEnabled;\\n    bool public buyBackEnabled;\\n\\n    uint256 public isstandard = 2;\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"Ownable: caller is not the creator\\\");\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(manager == _msgSender(), \\\"Manage:caller is not the manager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n\\n    modifier canMint() {\\n        require(state.mintflag > 0, \\\"Mintable: Disabled Mint\\\");\\n        _;\\n    }\\n\\n    modifier canPause() {\\n        require(state.mintflag > 0, \\\"Pausable: Disabled Pause\\\");\\n        _;\\n    }\\n\\n    modifier canBurn() {\\n        require(state.burnflag > 0, \\\"Burnable: Disabled Burn\\\");\\n        _;\\n    }\\n\\n    modifier canBlacklist() {\\n        require(state.blacklistflag > 0, \\\"Blacklist: Disabled Blacklist\\\");\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    event BlacklistUpdated(address indexed user, bool value);\\n    event Paused(address account);\\n    event Unpaused(address account);\\n    event BurnSuccess(uint256);\\n    event MintSuccess(uint256);\\n\\n    event RewardLiquidityProviders(uint256 tokenAmount);\\n    event BuyBackEnabledUpdated(bool enabled);\\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\\n    event SwapAndLiquify(\\n        uint256 tokensSwapped,\\n        uint256 ethReceived,\\n        uint256 tokensIntoLiqudity\\n    );\\n\\n    event SwapETHForTokens(uint256 amountIn, address[] path);\\n\\n    event SwapTokensForETH(uint256 amountIn, address[] path);\\n\\n    modifier lockTheSwap() {\\n        inSwapAndLiquify = true;\\n        _;\\n        inSwapAndLiquify = false;\\n    }\\n\\n    constructor(\\n        address creator_,\\n        address unirouter,\\n        address reciever,\\n        uint8 decimal_,\\n        uint256 supply,\\n        string memory name_,\\n        string memory symbol_\\n    ) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimal_;\\n\\n        IUniswapV2Router02 _UniswapRouter = IUniswapV2Router02(unirouter);\\n        UniswapPair = IUniswapV2Factory(_UniswapRouter.factory()).createPair(\\n            address(this),\\n            _UniswapRouter.WETH()\\n        );\\n\\n        UniswapRouter = _UniswapRouter;\\n        manager = _msgSender();\\n\\n        set(creator_, reciever, supply);\\n\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n    }\\n\\n    function set(\\n        address creator_,\\n        address reciever,\\n        uint256 supply\\n    ) private {\\n        marketingAddress = payable(reciever);\\n        owner = creator_;\\n        _tTotal = supply;\\n        _rTotal = (MAX - (MAX % supply));\\n\\n        _rOwned[creator_] = _rTotal;\\n\\n        buyBackEnabled = false;\\n        swapAndLiquifyEnabled = false;\\n\\n        _isExcludedFromFee[creator_] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n    }\\n\\n    function setStatus(SharedStructs.status memory _state)\\n        external\\n        onlyManager\\n    {\\n        state = _state;\\n    }\\n\\n    function setFee(uint256 settingflag, uint256[4] memory fee)\\n        external\\n        onlyManager\\n    {\\n        if (settingflag != 0 && settingflag != 1) {\\n            swapAndLiquifyEnabled = true;\\n        }\\n\\n        if (settingflag == 1 || settingflag == 2) {\\n            buyBackEnabled = true;\\n        }\\n\\n        if (settingflag != 3) {\\n            _taxFee = fee[0];\\n            marketingDivisor = fee[1];\\n        }\\n\\n        if (settingflag == 1 || settingflag == 2) {\\n            marketingDivisor = fee[2];\\n        }\\n\\n        if (settingflag == 3 || settingflag == 4) {\\n            _liquidityFee = fee[3];\\n        }\\n\\n        // if(settingflag != 0) {\\n        //    _holdersfee = fee[0];\\n        //     // _buybackFee = fee[1];\\n        // }\\n\\n        _previousTaxFee = _taxFee;\\n        _previousLiquidityFee = _liquidityFee;\\n    }\\n\\n    function mint(uint256 amount) public onlyOwner canMint {\\n        require(_tTotal + amount <= MAX, \\\"exceeds limit\\\");\\n\\n        _beforeTokenTransfer(msg.sender, msg.sender, amount);\\n\\n        _tTotal = _tTotal + amount;\\n        _tFeeTotal = _tFeeTotal + amount;\\n\\n        // uint256 tAmount;\\n\\n        // if (_isExcluded[account]) {\\n        //     _tOwned[account] = _tOwned[account].add(amount);\\n        // } else {\\n        //     tAmount = tokenFromReflection(_rOwned[account]);\\n        //     tAmount = tAmount.add(amount);\\n        //     _rOwned[account] = tokenFromReflection(tAmount);\\n        // }\\n\\n        emit MintSuccess(amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount) public onlyOwner canBurn {\\n        require(amount <= MAX, \\\"exceeds limit\\\");\\n\\n        _beforeTokenTransfer(msg.sender, address(0), amount);\\n\\n        _tTotal = _tTotal - amount;\\n        _tFeeTotal = _tFeeTotal + amount;\\n\\n        emit BurnSuccess(amount);\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (_isExcluded[account]) return _tOwned[account];\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _beforeTokenTransfer(msg.sender, recipient, amount);\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address _owner, address spender)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[_owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _beforeTokenTransfer(msg.sender, spender, amount);\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _beforeTokenTransfer(sender, recipient, amount);\\n        _transfer(sender, recipient, amount);\\n        require(\\n            amount <= _allowances[sender][msg.sender],\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        require(\\n            subtractedValue <= _allowances[msg.sender][spender],\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender] - subtractedValue\\n        );\\n        return true;\\n    }\\n\\n    function isExcludedFromReward(address account) public view returns (bool) {\\n        return _isExcluded[account];\\n    }\\n\\n    function totalFees() public view returns (uint256) {\\n        return _tFeeTotal;\\n    }\\n\\n    function minimumTokensBeforeSwapAmount() public view returns (uint256) {\\n        return minimumTokensBeforeSwap;\\n    }\\n\\n    function buyBackUpperLimitAmount() public view returns (uint256) {\\n        return buyBackUpperLimit;\\n    }\\n\\n    function deliver(uint256 tAmount) public {\\n        _beforeTokenTransfer(msg.sender, msg.sender, tAmount);\\n        address sender = msg.sender;\\n        require(\\n            !_isExcluded[sender],\\n            \\\"Excluded addresses cannot call this function\\\"\\n        );\\n        (uint256 rAmount, , , , , ) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender] - rAmount;\\n        _rTotal = _rTotal - rAmount;\\n        _tFeeTotal = _tFeeTotal + tAmount;\\n    }\\n\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\n        if (!deductTransferFee) {\\n            (uint256 rAmount, , , , , ) = _getValues(tAmount);\\n            return rAmount;\\n        } else {\\n            (, uint256 rTransferAmount, , , , ) = _getValues(tAmount);\\n            return rTransferAmount;\\n        }\\n    }\\n\\n    function tokenFromReflection(uint256 rAmount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(\\n            rAmount <= _rTotal,\\n            \\\"Amount must be less than total reflections\\\"\\n        );\\n        uint256 currentRate = _getRate();\\n        return rAmount / currentRate;\\n    }\\n\\n    function excludeFromReward(address account) public onlyOwner {\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\n        if (_rOwned[account] > 0) {\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\n        }\\n        _isExcluded[account] = true;\\n        _excluded.push(account);\\n    }\\n\\n    function includeInReward(address account) external onlyOwner {\\n        require(_isExcluded[account], \\\"Account is already excluded\\\");\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_excluded[i] == account) {\\n                _excluded[i] = _excluded[_excluded.length - 1];\\n                _tOwned[account] = 0;\\n                _isExcluded[account] = false;\\n                _excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _approve(\\n        address _owner,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        require(_owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        if (from != owner && to != owner) {\\n            require(\\n                amount <= _maxTxAmount,\\n                \\\"Transfer amount exceeds the maxTxAmount.\\\"\\n            );\\n        }\\n\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        bool overMinimumTokenBalance = contractTokenBalance >=\\n            minimumTokensBeforeSwap;\\n\\n        if (!inSwapAndLiquify && swapAndLiquifyEnabled && to == UniswapPair) {\\n            if (overMinimumTokenBalance) {\\n                contractTokenBalance = minimumTokensBeforeSwap;\\n                swapTokens(contractTokenBalance);\\n            }\\n            uint256 balance = address(this).balance;\\n            if (buyBackEnabled && balance > uint256(1 * 10**18)) {\\n                if (balance > buyBackUpperLimit) balance = buyBackUpperLimit;\\n\\n                buyBackTokens(balance / 100);\\n            }\\n        }\\n\\n        bool takeFee = true;\\n\\n        //if any account belongs to _isExcludedFromFee account then remove the fee\\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\\n            takeFee = false;\\n        }\\n\\n        _tokenTransfer(from, to, amount, takeFee);\\n    }\\n\\n    function swapTokens(uint256 contractTokenBalance) private lockTheSwap {\\n        uint256 initialBalance = address(this).balance;\\n        swapTokensForETH(contractTokenBalance);\\n        uint256 transferredBalance = address(this).balance - initialBalance;\\n\\n        //Send to Marketing address\\n        transferToAddressETH(\\n            marketingAddress,\\n            (transferredBalance / _liquidityFee) * marketingDivisor\\n        );\\n    }\\n\\n    function buyBackTokens(uint256 amount) private lockTheSwap {\\n        if (amount > 0) {\\n            swapETHForTokens(amount);\\n        }\\n    }\\n\\n    function swapTokensForETH(uint256 tokenAmount) private {\\n        // generate the Uniswap pair path of token -> wETH\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = UniswapRouter.WETH();\\n\\n        _approve(address(this), address(UniswapRouter), tokenAmount);\\n\\n        // make the swap\\n        UniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this), // The contract\\n            block.timestamp\\n        );\\n\\n        emit SwapTokensForETH(tokenAmount, path);\\n    }\\n\\n    function swapETHForTokens(uint256 amount) private {\\n        // generate the Uniswap pair path of token -> wETH\\n        address[] memory path = new address[](2);\\n        path[0] = UniswapRouter.WETH();\\n        path[1] = address(this);\\n\\n        // make the swap\\n        UniswapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{\\n            value: amount\\n        }(\\n            0, // accept any amount of Tokens\\n            path,\\n            deadAddress, // Burn address\\n            block.timestamp + 300\\n        );\\n\\n        emit SwapETHForTokens(amount, path);\\n    }\\n\\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\\n        // approve token transfer to cover all possible scenarios\\n        _approve(address(this), address(UniswapRouter), tokenAmount);\\n\\n        // add the liquidity\\n        UniswapRouter.addLiquidityETH{value: ETHAmount}(\\n            address(this),\\n            tokenAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            owner,\\n            block.timestamp\\n        );\\n    }\\n\\n    function _tokenTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bool takeFee\\n    ) private {\\n        if (!takeFee) removeAllFee();\\n\\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\\n            _transferFromExcluded(sender, recipient, amount);\\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\n            _transferToExcluded(sender, recipient, amount);\\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\n            _transferBothExcluded(sender, recipient, amount);\\n        } else {\\n            _transferStandard(sender, recipient, amount);\\n        }\\n\\n        if (!takeFee) restoreAllFee();\\n    }\\n\\n    function _transferStandard(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity\\n        ) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender] - rAmount;\\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\\n        _takeLiquidity(tLiquidity);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferToExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity\\n        ) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender] - rAmount;\\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\\n        _takeLiquidity(tLiquidity);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferFromExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity\\n        ) = _getValues(tAmount);\\n        _tOwned[sender] = _tOwned[sender] - tAmount;\\n        _rOwned[sender] = _rOwned[sender] - rAmount;\\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\\n        _takeLiquidity(tLiquidity);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferBothExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity\\n        ) = _getValues(tAmount);\\n        _tOwned[sender] = _tOwned[sender] - tAmount;\\n        _rOwned[sender] = _rOwned[sender] - rAmount;\\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\\n        _takeLiquidity(tLiquidity);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\n        _rTotal = _rTotal - rFee;\\n        _tFeeTotal = _tFeeTotal + tFee;\\n    }\\n\\n    function _getValues(uint256 tAmount)\\n        private\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity\\n        ) = _getTValues(tAmount);\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\n            tAmount,\\n            tFee,\\n            tLiquidity,\\n            _getRate()\\n        );\\n        return (\\n            rAmount,\\n            rTransferAmount,\\n            rFee,\\n            tTransferAmount,\\n            tFee,\\n            tLiquidity\\n        );\\n    }\\n\\n    function _getTValues(uint256 tAmount)\\n        private\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 tFee = calculateTaxFee(tAmount);\\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\\n        uint256 tTransferAmount = tAmount - tFee - tLiquidity;\\n        return (tTransferAmount, tFee, tLiquidity);\\n    }\\n\\n    function _getRValues(\\n        uint256 tAmount,\\n        uint256 tFee,\\n        uint256 tLiquidity,\\n        uint256 currentRate\\n    )\\n        private\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 rAmount = tAmount * currentRate;\\n        uint256 rFee = tFee * currentRate;\\n        uint256 rLiquidity = tLiquidity * currentRate;\\n        uint256 rTransferAmount = rAmount - rFee - rLiquidity;\\n        return (rAmount, rTransferAmount, rFee);\\n    }\\n\\n    function _getRate() private view returns (uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply / tSupply;\\n    }\\n\\n    function _getCurrentSupply() private view returns (uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (\\n                _rOwned[_excluded[i]] > rSupply ||\\n                _tOwned[_excluded[i]] > tSupply\\n            ) return (_rTotal, _tTotal);\\n            rSupply = rSupply - _rOwned[_excluded[i]];\\n            tSupply = tSupply - _tOwned[_excluded[i]];\\n        }\\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n\\n    function _takeLiquidity(uint256 tLiquidity) private {\\n        uint256 currentRate = _getRate();\\n        uint256 rLiquidity = tLiquidity * currentRate;\\n        _rOwned[address(this)] = _rOwned[address(this)] + rLiquidity;\\n        if (_isExcluded[address(this)])\\n            _tOwned[address(this)] = _tOwned[address(this)] + tLiquidity;\\n    }\\n\\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\\n        return (_amount * _taxFee) / (10**2);\\n    }\\n\\n    function calculateLiquidityFee(uint256 _amount)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        return (_amount * _liquidityFee) / (10**2);\\n    }\\n\\n    function removeAllFee() private {\\n        if (_taxFee == 0 && _liquidityFee == 0) return;\\n\\n        _previousTaxFee = _taxFee;\\n        _previousLiquidityFee = _liquidityFee;\\n\\n        _taxFee = 0;\\n        _liquidityFee = 0;\\n    }\\n\\n    function restoreAllFee() private {\\n        _taxFee = _previousTaxFee;\\n        _liquidityFee = _previousLiquidityFee;\\n    }\\n\\n    function isExcludedFromFee(address account) public view returns (bool) {\\n        return _isExcludedFromFee[account];\\n    }\\n\\n    function excludeFromFee(address account) public onlyOwner {\\n        _isExcludedFromFee[account] = true;\\n    }\\n\\n    function includeInFee(address account) public onlyOwner {\\n        _isExcludedFromFee[account] = false;\\n    }\\n\\n    function blacklistUpdate(address user, bool value)\\n        public\\n        virtual\\n        onlyOwner\\n        canBlacklist\\n    {\\n        // require(_owner == msg.sender, \\\"Only owner is allowed to modify blacklist.\\\");\\n        _blacklist[user] = value;\\n        emit BlacklistUpdated(user, value);\\n    }\\n\\n    function isBlackListed(address user)\\n        public\\n        view\\n        virtual\\n        canBlacklist\\n        returns (bool)\\n    {\\n        return _blacklist[user];\\n    }\\n\\n    function paused() public view virtual canPause returns (bool) {\\n        return _paused;\\n    }\\n\\n    function _pause() public virtual onlyOwner canPause whenNotPaused {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function _unpause() public virtual onlyOwner canPause whenPaused {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address sender,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        // require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        // require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount >= 0, \\\"ERC20: transfer to the zero address\\\");\\n\\n        if (state.blacklistflag > 0) {\\n            require(\\n                !isBlackListed(sender),\\n                \\\"Token transfer refused. Receiver is on blacklist\\\"\\n            );\\n            require(\\n                !isBlackListed(to),\\n                \\\"Token transfer refused. Receiver is on blacklist\\\"\\n            );\\n        }\\n\\n        if (state.pauseflag > 0) {\\n            require(!paused(), \\\"Token is Paused.\\\");\\n        }\\n    }\\n\\n    function transferToAddressETH(address payable recipient, uint256 amount)\\n        private\\n    {\\n        recipient.transfer(amount);\\n    }\\n\\n    //to recieve ETH from UniswapRouter when swaping\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x855a7922301d2996a3c4639adebb49161c2180b00795206de7774c745481be8a\",\"license\":\"MIT\"},\"contracts/CreateToken/Meter/LiquidityTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./StandardToken.sol\\\";\\nimport \\\"./LiquidityToken.sol\\\";\\n\\ncontract LiquidityTokenFactory {\\n    function deploy(\\n        address router_address,\\n        address creator_,\\n        address reciever,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimal_,\\n        uint256 supply\\n    ) external returns (LiquidityToken) {\\n        return\\n            new LiquidityToken(\\n                creator_,\\n                router_address,\\n                reciever,\\n                decimal_,\\n                supply,\\n                name_,\\n                symbol_\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x74df91d1d3364b516c400a4ffc22faad4dae4918a10173701043ad4d367029fd\",\"license\":\"MIT\"},\"contracts/CreateToken/Meter/SharedStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary SharedStructs {\\n    struct status {\\n        uint256 mintflag;\\n        uint256 pauseflag;\\n        uint256 burnflag;\\n        uint256 blacklistflag;\\n    }\\n}\\n\",\"keccak256\":\"0xd500eabf6e2d999f4ef083083c004b170f8386c6fc44199a75d05cf1a1b46999\",\"license\":\"MIT\"},\"contracts/CreateToken/Meter/StandardToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./SharedStructs.sol\\\";\\n\\ncontract StandardToken is Context, IERC20, IERC20Metadata {\\n    // address public owner;\\n    address public owner;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n    uint256 private _totalSupply;\\n\\n    uint256 public isstandard = 1;\\n\\n    bool private _paused;\\n    SharedStructs.status public state;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    mapping(address => bool) _blacklist;\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    modifier canMint() {\\n        require(state.mintflag > 0, \\\"Mintable: Disabled Mint\\\");\\n        _;\\n    }\\n\\n    modifier canPause() {\\n        require(state.mintflag > 0, \\\"Pausable: Disabled Pause\\\");\\n        _;\\n    }\\n\\n    modifier canBurn() {\\n        require(state.burnflag > 0, \\\"Burnable: Disabled Burn\\\");\\n        _;\\n    }\\n\\n    modifier canBlacklist() {\\n        require(state.blacklistflag > 0, \\\"Blacklist: Disabled Blacklist\\\");\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    event BlacklistUpdated(address indexed user, bool value);\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Sets the values for {name}, {symbol} and {decimals}.\\n     *\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(\\n        address creator_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_,\\n        uint256 tokenSupply_,\\n        SharedStructs.status memory _state\\n    ) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n        owner = creator_;\\n\\n        state = _state;\\n\\n        _mint(creator_, tokenSupply_);\\n\\n        _paused = false;\\n    }\\n\\n    function setStatus(SharedStructs.status memory _state) internal virtual {\\n        state = _state;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address _owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[_owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(\\n            senderBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function mint(address account, uint256 amount)\\n        public\\n        virtual\\n        onlyOwner\\n        canMint\\n    {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount) public virtual onlyOwner canBurn {\\n        require(\\n            _msgSender() != address(0),\\n            \\\"ERC20: burn from the zero address\\\"\\n        );\\n\\n        _beforeTokenTransfer(_msgSender(), address(0), amount);\\n\\n        uint256 accountBalance = _balances[_msgSender()];\\n\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n\\n        _balances[_msgSender()] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(_msgSender(), address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address _owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(_owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[_owner][spender] = amount;\\n        emit Approval(_owner, spender, amount);\\n    }\\n\\n    function blacklistUpdate(address user, bool value)\\n        public\\n        virtual\\n        onlyOwner\\n        canBlacklist\\n    {\\n        // require(_owner == _msgSender(), \\\"Only owner is allowed to modify blacklist.\\\");\\n        _blacklist[user] = value;\\n        emit BlacklistUpdated(user, value);\\n    }\\n\\n    function isBlackListed(address user)\\n        public\\n        view\\n        virtual\\n        canBlacklist\\n        returns (bool)\\n    {\\n        return _blacklist[user];\\n    }\\n\\n    function paused() public view virtual canPause returns (bool) {\\n        return _paused;\\n    }\\n\\n    function _pause() public virtual onlyOwner canPause whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    function _unpause() public virtual onlyOwner canPause whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address sender,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        // require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        // require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount >= 0, \\\"ERC20: transfer to the zero address\\\");\\n\\n        if (state.blacklistflag > 0) {\\n            require(\\n                !isBlackListed(sender),\\n                \\\"Token transfer refused. Receiver is on blacklist\\\"\\n            );\\n            require(\\n                !isBlackListed(to),\\n                \\\"Token transfer refused. Receiver is on blacklist\\\"\\n            );\\n        }\\n\\n        if (state.pauseflag > 0) {\\n            require(!paused(), \\\"Token is Paused.\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x250e60d237d472a99d29f152d1b9008d95c9b9bf8e4867479f2564556d7c54fd\",\"license\":\"MIT\"},\"contracts/CreateToken/Meter/StandardTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./StandardToken.sol\\\";\\n\\ncontract StandardTokenFactory {\\n    function deploy(\\n        address creator_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_,\\n        uint256 tokenSupply_,\\n        SharedStructs.status memory _state\\n    ) external returns (StandardToken) {\\n        return\\n            new StandardToken(\\n                creator_,\\n                name_,\\n                symbol_,\\n                decimals_,\\n                tokenSupply_,\\n                _state\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xcb2171e29fd18882da30fea1d395c12cda514714bf6e5bd24bed1020a44907d5\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x651dc139244865751e0db534d2a0f377a6c81ee05564da3d16a48dcf0f719cff\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x39e39f4d5f1358632434b8c9fd524ac150b4ef0f2de6822747aced6ee3970b01\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9b3770413425e82681e46c4f5cada6c5065ed03795bc72d4cff6e118ec0a19e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051620011ce380380620011ce83398101604081905261003191610084565b600080546001600160a01b039586166001600160a01b03199182161790915560018054948616948216949094179093556009805492851692841692909217909155600a80549190931691161790556100fb565b6000806000806080858703121561009a57600080fd5b84516100a5816100e3565b60208601519094506100b6816100e3565b60408601519093506100c7816100e3565b60608601519092506100d8816100e3565b939692955090935050565b6001600160a01b03811681146100f857600080fd5b50565b6110c3806200010b6000396000f3fe6080604052600436106100965760003560e01c806376f444a311610069578063cf3059721161004e578063cf30597214610184578063ddca3f4314610197578063df251962146101ef57600080fd5b806376f444a31461011f5780638da5cb5b1461013257600080fd5b806312065fe01461009b57806313af4035146100bb57806336646180146100dd5780634311de8f1461010a575b600080fd5b3480156100a757600080fd5b506040514781526020015b60405180910390f35b3480156100c757600080fd5b506100db6100d6366004610ba8565b61020f565b005b3480156100e957600080fd5b506100fd6100f8366004610ba8565b61030f565b6040516100b29190610f3d565b34801561011657600080fd5b506100db61039f565b6100db61012d366004610bcc565b61049b565b34801561013e57600080fd5b5060005461015f9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100b2565b6100db610192366004610c9d565b610779565b3480156101a357600080fd5b506003546004546005546006546007546008546101c295949392919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016100b2565b3480156101fb57600080fd5b506100db61020a366004610d5c565b610941565b60005473ffffffffffffffffffffffffffffffffffffffff163314610295576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c79206d616e616765722063616e20646f2069740000000000000000000060448201526064015b60405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f2ad00119c52384b34359201efdeae8e4bcc95b285f433b645adb782ef8ffb367906020015b60405180910390a150565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602090815260409182902080548351818402810184019094528084526060939283018282801561039357602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610368575b50505050509050919050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610420576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4f6e6c79206d616e616765722063616e20776974686472617700000000000000604482015260640161028c565b6000805460405173ffffffffffffffffffffffffffffffffffffffff9091169182914780156108fc0292909190818181858888f1935050505015801561046a573d6000803e3d6000fd5b506040514781527fc67a6e2c9e13b320d5ce7e24743ea93ba9261320310966dd6240569493690eff90602001610304565b6104a481610999565b34101561050d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f42616c616e636520697320696e737566666963656e7400000000000000000000604482015260640161028c565b600a546001546040517fb304372d00000000000000000000000000000000000000000000000000000000815260009273ffffffffffffffffffffffffffffffffffffffff9081169263b304372d9261057792909116908e908e908e908e908e908e90600401610e41565b602060405180830381600087803b15801561059157600080fd5b505af11580156105a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c99190610d3f565b6040517f67d2465600000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff8216906367d24656906106209087908790600401610fc2565b600060405180830381600087803b15801561063a57600080fd5b505af115801561064e573d6000803e3d6000fd5b50506040517f245e579800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416925063245e579891506106a4908590600401610f97565b600060405180830381600087803b1580156106be57600080fd5b505af11580156106d2573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff8a8116600090815260026020908152604080832080546001810182559084529282902090920180547fffffffffffffffffffffffff000000000000000000000000000000000000000016938516938417905590519182527fd38b5c5c827552bf78686fe20cff5da58946cbe6fab7a370a203e365ced42253910160405180910390a150505050505050505050565b61078281610999565b3410156107eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f42616c616e636520697320696e737566666963656e7400000000000000000000604482015260640161028c565b6009546040517f213db6b700000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063213db6b79061084c908a908a908a908a908a908a90600401610eae565b602060405180830381600087803b15801561086657600080fd5b505af115801561087a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089e9190610d3f565b73ffffffffffffffffffffffffffffffffffffffff888116600090815260026020908152604080832080546001810182559084529282902090920180547fffffffffffffffffffffffff000000000000000000000000000000000000000016938516938417905590519182529192507f11d95a3a35d0b4b9b14fd17216057aeefef842668d998184cb9f2e114a467a91910160405180910390a150505050505050565b805160035560208101516004556040808201516005556060820151600655608082015160075560a0820151600855517f03855d30824d2deef7728a39f080e5bdad2c59aaeaf4397540a00186095d463a90600090a150565b600354815160009190156109b7576004546109b49082610ffa565b90505b6040830151156109d1576005546109ce9082610ffa565b90505b6020830151156109eb576006546109e89082610ffa565b90505b606083015115610a0557600754610a029082610ffa565b90505b92915050565b600082601f830112610a1c57600080fd5b6040516080810181811067ffffffffffffffff82111715610a3f57610a3f611039565b604052808360808101861015610a5457600080fd5b60005b6004811015610a76578135835260209283019290910190600101610a57565b509195945050505050565b600082601f830112610a9257600080fd5b813567ffffffffffffffff80821115610aad57610aad611039565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610af357610af3611039565b81604052838152866020858801011115610b0c57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060808284031215610b3e57600080fd5b6040516080810181811067ffffffffffffffff82111715610b6157610b61611039565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b803560ff81168114610ba357600080fd5b919050565b600060208284031215610bba57600080fd5b8135610bc581611068565b9392505050565b60008060008060008060008060006101e08a8c031215610beb57600080fd5b8935610bf681611068565b985060208a0135610c0681611068565b975060408a013567ffffffffffffffff80821115610c2357600080fd5b610c2f8d838e01610a81565b985060608c0135915080821115610c4557600080fd5b50610c528c828d01610a81565b965050610c6160808b01610b92565b945060a08a0135935060c08a01359250610c7e8b60e08c01610a0b565b9150610c8e8b6101608c01610b2c565b90509295985092959850929598565b6000806000806000806101208789031215610cb757600080fd5b8635610cc281611068565b9550602087013567ffffffffffffffff80821115610cdf57600080fd5b610ceb8a838b01610a81565b96506040890135915080821115610d0157600080fd5b50610d0e89828a01610a81565b945050610d1d60608801610b92565b925060808701359150610d338860a08901610b2c565b90509295509295509295565b600060208284031215610d5157600080fd5b8151610bc581611068565b600060c08284031215610d6e57600080fd5b60405160c0810181811067ffffffffffffffff82111715610d9157610d91611039565b8060405250823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201528091505092915050565b6000815180845260005b81811015610dfc57602081850181015186830182015201610de0565b81811115610e0e576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600073ffffffffffffffffffffffffffffffffffffffff808a168352808916602084015280881660408401525060e06060830152610e8260e0830187610dd6565b8281036080840152610e948187610dd6565b60ff9590951660a0840152505060c0015295945050505050565b600061012073ffffffffffffffffffffffffffffffffffffffff89168352806020840152610ede81840189610dd6565b90508281036040840152610ef28188610dd6565b91505060ff85166060830152836080830152610f3260a0830184805182526020810151602083015260408101516040830152606081015160608301525050565b979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015610f8b57835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610f59565b50909695505050505050565b8151815260208083015190820152604080830151908201526060808301519082015260808101610a05565b82815260a0810160208083018460005b6004811015610fef57815183529183019190830190600101610fd2565b505050509392505050565b60008219821115611034577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461108a57600080fd5b5056fea2646970667358221220f85c3bbd192487b3c49a2d850708c29b31cdc752ec9871b3aed57fb5662ab43e64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100965760003560e01c806376f444a311610069578063cf3059721161004e578063cf30597214610184578063ddca3f4314610197578063df251962146101ef57600080fd5b806376f444a31461011f5780638da5cb5b1461013257600080fd5b806312065fe01461009b57806313af4035146100bb57806336646180146100dd5780634311de8f1461010a575b600080fd5b3480156100a757600080fd5b506040514781526020015b60405180910390f35b3480156100c757600080fd5b506100db6100d6366004610ba8565b61020f565b005b3480156100e957600080fd5b506100fd6100f8366004610ba8565b61030f565b6040516100b29190610f3d565b34801561011657600080fd5b506100db61039f565b6100db61012d366004610bcc565b61049b565b34801561013e57600080fd5b5060005461015f9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100b2565b6100db610192366004610c9d565b610779565b3480156101a357600080fd5b506003546004546005546006546007546008546101c295949392919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016100b2565b3480156101fb57600080fd5b506100db61020a366004610d5c565b610941565b60005473ffffffffffffffffffffffffffffffffffffffff163314610295576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c79206d616e616765722063616e20646f2069740000000000000000000060448201526064015b60405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f2ad00119c52384b34359201efdeae8e4bcc95b285f433b645adb782ef8ffb367906020015b60405180910390a150565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602090815260409182902080548351818402810184019094528084526060939283018282801561039357602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610368575b50505050509050919050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610420576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4f6e6c79206d616e616765722063616e20776974686472617700000000000000604482015260640161028c565b6000805460405173ffffffffffffffffffffffffffffffffffffffff9091169182914780156108fc0292909190818181858888f1935050505015801561046a573d6000803e3d6000fd5b506040514781527fc67a6e2c9e13b320d5ce7e24743ea93ba9261320310966dd6240569493690eff90602001610304565b6104a481610999565b34101561050d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f42616c616e636520697320696e737566666963656e7400000000000000000000604482015260640161028c565b600a546001546040517fb304372d00000000000000000000000000000000000000000000000000000000815260009273ffffffffffffffffffffffffffffffffffffffff9081169263b304372d9261057792909116908e908e908e908e908e908e90600401610e41565b602060405180830381600087803b15801561059157600080fd5b505af11580156105a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c99190610d3f565b6040517f67d2465600000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff8216906367d24656906106209087908790600401610fc2565b600060405180830381600087803b15801561063a57600080fd5b505af115801561064e573d6000803e3d6000fd5b50506040517f245e579800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416925063245e579891506106a4908590600401610f97565b600060405180830381600087803b1580156106be57600080fd5b505af11580156106d2573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff8a8116600090815260026020908152604080832080546001810182559084529282902090920180547fffffffffffffffffffffffff000000000000000000000000000000000000000016938516938417905590519182527fd38b5c5c827552bf78686fe20cff5da58946cbe6fab7a370a203e365ced42253910160405180910390a150505050505050505050565b61078281610999565b3410156107eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f42616c616e636520697320696e737566666963656e7400000000000000000000604482015260640161028c565b6009546040517f213db6b700000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063213db6b79061084c908a908a908a908a908a908a90600401610eae565b602060405180830381600087803b15801561086657600080fd5b505af115801561087a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089e9190610d3f565b73ffffffffffffffffffffffffffffffffffffffff888116600090815260026020908152604080832080546001810182559084529282902090920180547fffffffffffffffffffffffff000000000000000000000000000000000000000016938516938417905590519182529192507f11d95a3a35d0b4b9b14fd17216057aeefef842668d998184cb9f2e114a467a91910160405180910390a150505050505050565b805160035560208101516004556040808201516005556060820151600655608082015160075560a0820151600855517f03855d30824d2deef7728a39f080e5bdad2c59aaeaf4397540a00186095d463a90600090a150565b600354815160009190156109b7576004546109b49082610ffa565b90505b6040830151156109d1576005546109ce9082610ffa565b90505b6020830151156109eb576006546109e89082610ffa565b90505b606083015115610a0557600754610a029082610ffa565b90505b92915050565b600082601f830112610a1c57600080fd5b6040516080810181811067ffffffffffffffff82111715610a3f57610a3f611039565b604052808360808101861015610a5457600080fd5b60005b6004811015610a76578135835260209283019290910190600101610a57565b509195945050505050565b600082601f830112610a9257600080fd5b813567ffffffffffffffff80821115610aad57610aad611039565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610af357610af3611039565b81604052838152866020858801011115610b0c57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060808284031215610b3e57600080fd5b6040516080810181811067ffffffffffffffff82111715610b6157610b61611039565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b803560ff81168114610ba357600080fd5b919050565b600060208284031215610bba57600080fd5b8135610bc581611068565b9392505050565b60008060008060008060008060006101e08a8c031215610beb57600080fd5b8935610bf681611068565b985060208a0135610c0681611068565b975060408a013567ffffffffffffffff80821115610c2357600080fd5b610c2f8d838e01610a81565b985060608c0135915080821115610c4557600080fd5b50610c528c828d01610a81565b965050610c6160808b01610b92565b945060a08a0135935060c08a01359250610c7e8b60e08c01610a0b565b9150610c8e8b6101608c01610b2c565b90509295985092959850929598565b6000806000806000806101208789031215610cb757600080fd5b8635610cc281611068565b9550602087013567ffffffffffffffff80821115610cdf57600080fd5b610ceb8a838b01610a81565b96506040890135915080821115610d0157600080fd5b50610d0e89828a01610a81565b945050610d1d60608801610b92565b925060808701359150610d338860a08901610b2c565b90509295509295509295565b600060208284031215610d5157600080fd5b8151610bc581611068565b600060c08284031215610d6e57600080fd5b60405160c0810181811067ffffffffffffffff82111715610d9157610d91611039565b8060405250823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201528091505092915050565b6000815180845260005b81811015610dfc57602081850181015186830182015201610de0565b81811115610e0e576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600073ffffffffffffffffffffffffffffffffffffffff808a168352808916602084015280881660408401525060e06060830152610e8260e0830187610dd6565b8281036080840152610e948187610dd6565b60ff9590951660a0840152505060c0015295945050505050565b600061012073ffffffffffffffffffffffffffffffffffffffff89168352806020840152610ede81840189610dd6565b90508281036040840152610ef28188610dd6565b91505060ff85166060830152836080830152610f3260a0830184805182526020810151602083015260408101516040830152606081015160608301525050565b979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015610f8b57835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610f59565b50909695505050505050565b8151815260208083015190820152604080830151908201526060808301519082015260808101610a05565b82815260a0810160208083018460005b6004811015610fef57815183529183019190830190600101610fd2565b505050509392505050565b60008219821115611034577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461108a57600080fd5b5056fea2646970667358221220f85c3bbd192487b3c49a2d850708c29b31cdc752ec9871b3aed57fb5662ab43e64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2574,
        "contract": "contracts/CreateToken/Meter/CreateVerify.sol:CreateManage",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2576,
        "contract": "contracts/CreateToken/Meter/CreateVerify.sol:CreateManage",
        "label": "router_address",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2581,
        "contract": "contracts/CreateToken/Meter/CreateVerify.sol:CreateManage",
        "label": "tokens",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 2584,
        "contract": "contracts/CreateToken/Meter/CreateVerify.sol:CreateManage",
        "label": "fee",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(feeInfo)2572_storage"
      },
      {
        "astId": 2587,
        "contract": "contracts/CreateToken/Meter/CreateVerify.sol:CreateManage",
        "label": "standardTokenFactory",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(StandardTokenFactory)6374"
      },
      {
        "astId": 2590,
        "contract": "contracts/CreateToken/Meter/CreateVerify.sol:CreateManage",
        "label": "liquidityTokenFactory",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(LiquidityTokenFactory)5482"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(LiquidityTokenFactory)5482": {
        "encoding": "inplace",
        "label": "contract LiquidityTokenFactory",
        "numberOfBytes": "20"
      },
      "t_contract(StandardTokenFactory)6374": {
        "encoding": "inplace",
        "label": "contract StandardTokenFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_struct(feeInfo)2572_storage": {
        "encoding": "inplace",
        "label": "struct CreateManage.feeInfo",
        "members": [
          {
            "astId": 2561,
            "contract": "contracts/CreateToken/Meter/CreateVerify.sol:CreateManage",
            "label": "normal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2563,
            "contract": "contracts/CreateToken/Meter/CreateVerify.sol:CreateManage",
            "label": "mint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2565,
            "contract": "contracts/CreateToken/Meter/CreateVerify.sol:CreateManage",
            "label": "burn",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2567,
            "contract": "contracts/CreateToken/Meter/CreateVerify.sol:CreateManage",
            "label": "pause",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2569,
            "contract": "contracts/CreateToken/Meter/CreateVerify.sol:CreateManage",
            "label": "blacklist",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2571,
            "contract": "contracts/CreateToken/Meter/CreateVerify.sol:CreateManage",
            "label": "deflation",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}