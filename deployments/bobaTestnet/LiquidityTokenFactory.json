{
  "address": "0xAdb5047623dDe3535fdb91811aaEce731f2574C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "creator_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reciever",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimal_",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "contract LiquidityToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa6f97df1adb33b02c8f0e95c632d8d3c5d6d906fd5ca853ca43c09f7fce4f3c1",
  "receipt": {
    "to": null,
    "from": "0xDeAdA90a7B242FC396eB277717a31e67A6005c93",
    "contractAddress": "0xAdb5047623dDe3535fdb91811aaEce731f2574C9",
    "transactionIndex": 0,
    "gasUsed": "9043458",
    "logsBloom": "0x
    "blockHash": "0x172b72533068550484cdef25bfbc308de5d04d6d35b253edcbc38eb3df9a91eb",
    "transactionHash": "0xa6f97df1adb33b02c8f0e95c632d8d3c5d6d906fd5ca853ca43c09f7fce4f3c1",
    "logs": [],
    "blockNumber": 123634,
    "cumulativeGasUsed": "9043458",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e0d08e14952bc7ca068be5a2359cf66e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reciever\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimal_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"contract LiquidityToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CreateToken/Meter/LiquidityTokenFactory.sol\":\"LiquidityTokenFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/CreateToken/Meter/LiquidityToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./SharedStructs.sol\\\";\\nimport \\\"../../interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../../interfaces/IUniswapV2Factory.sol\\\";\\n\\ncontract LiquidityToken is Context, IERC20 {\\n    using Address for address;\\n\\n    address payable public marketingAddress; // Marketing Address\\n    address public immutable deadAddress =\\n        0x000000000000000000000000000000000000dEaD;\\n    address public owner;\\n    address private manager;\\n    mapping(address => uint256) private _rOwned;\\n    mapping(address => uint256) private _tOwned;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    mapping(address => bool) private _isExcludedFromFee;\\n\\n    mapping(address => bool) private _isExcluded;\\n    address[] private _excluded;\\n\\n    uint256 private constant MAX = type(uint256).max;\\n    uint256 private _tTotal;\\n    uint256 private _rTotal;\\n    uint256 private _tFeeTotal;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    bool private _paused;\\n    SharedStructs.status public state;\\n\\n    mapping(address => bool) _blacklist;\\n\\n    uint256 public _taxFee;\\n    uint256 private _previousTaxFee;\\n\\n    uint256 public _liquidityFee;\\n    uint256 private _previousLiquidityFee;\\n\\n    uint256 public marketingDivisor;\\n\\n    uint256 public _maxTxAmount = 5000000 * 10**6 * 10**9;\\n    uint256 private minimumTokensBeforeSwap = 300000 * 10**6 * 10**9;\\n    uint256 private buyBackUpperLimit = 1 * 10**18;\\n\\n    IUniswapV2Router02 public immutable UniswapRouter;\\n    address public immutable UniswapPair;\\n\\n    bool inSwapAndLiquify;\\n    bool public swapAndLiquifyEnabled;\\n    bool public buyBackEnabled;\\n\\n    uint256 public isstandard = 2;\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"Ownable: caller is not the creator\\\");\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(manager == _msgSender(), \\\"Manage:caller is not the manager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n\\n    modifier canMint() {\\n        require(state.mintflag > 0, \\\"Mintable: Disabled Mint\\\");\\n        _;\\n    }\\n\\n    modifier canPause() {\\n        require(state.mintflag > 0, \\\"Pausable: Disabled Pause\\\");\\n        _;\\n    }\\n\\n    modifier canBurn() {\\n        require(state.burnflag > 0, \\\"Burnable: Disabled Burn\\\");\\n        _;\\n    }\\n\\n    modifier canBlacklist() {\\n        require(state.blacklistflag > 0, \\\"Blacklist: Disabled Blacklist\\\");\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    event BlacklistUpdated(address indexed user, bool value);\\n    event Paused(address account);\\n    event Unpaused(address account);\\n    event BurnSuccess(uint256);\\n    event MintSuccess(uint256);\\n\\n    event RewardLiquidityProviders(uint256 tokenAmount);\\n    event BuyBackEnabledUpdated(bool enabled);\\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\\n    event SwapAndLiquify(\\n        uint256 tokensSwapped,\\n        uint256 ethReceived,\\n        uint256 tokensIntoLiqudity\\n    );\\n\\n    event SwapETHForTokens(uint256 amountIn, address[] path);\\n\\n    event SwapTokensForETH(uint256 amountIn, address[] path);\\n\\n    modifier lockTheSwap() {\\n        inSwapAndLiquify = true;\\n        _;\\n        inSwapAndLiquify = false;\\n    }\\n\\n    constructor(\\n        address creator_,\\n        address unirouter,\\n        address reciever,\\n        uint8 decimal_,\\n        uint256 supply,\\n        string memory name_,\\n        string memory symbol_\\n    ) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimal_;\\n\\n        IUniswapV2Router02 _UniswapRouter = IUniswapV2Router02(unirouter);\\n        UniswapPair = IUniswapV2Factory(_UniswapRouter.factory()).createPair(\\n            address(this),\\n            _UniswapRouter.WETH()\\n        );\\n\\n        UniswapRouter = _UniswapRouter;\\n        manager = _msgSender();\\n\\n        set(creator_, reciever, supply);\\n\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n    }\\n\\n    function set(\\n        address creator_,\\n        address reciever,\\n        uint256 supply\\n    ) private {\\n        marketingAddress = payable(reciever);\\n        owner = creator_;\\n        _tTotal = supply;\\n        _rTotal = (MAX - (MAX % supply));\\n\\n        _rOwned[creator_] = _rTotal;\\n\\n        buyBackEnabled = false;\\n        swapAndLiquifyEnabled = false;\\n\\n        _isExcludedFromFee[creator_] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n    }\\n\\n    function setStatus(SharedStructs.status memory _state)\\n        external\\n        onlyManager\\n    {\\n        state = _state;\\n    }\\n\\n    function setFee(uint256 settingflag, uint256[4] memory fee)\\n        external\\n        onlyManager\\n    {\\n        if (settingflag != 0 && settingflag != 1) {\\n            swapAndLiquifyEnabled = true;\\n        }\\n\\n        if (settingflag == 1 || settingflag == 2) {\\n            buyBackEnabled = true;\\n        }\\n\\n        if (settingflag != 3) {\\n            _taxFee = fee[0];\\n            marketingDivisor = fee[1];\\n        }\\n\\n        if (settingflag == 1 || settingflag == 2) {\\n            marketingDivisor = fee[2];\\n        }\\n\\n        if (settingflag == 3 || settingflag == 4) {\\n            _liquidityFee = fee[3];\\n        }\\n\\n        // if(settingflag != 0) {\\n        //    _holdersfee = fee[0];\\n        //     // _buybackFee = fee[1];\\n        // }\\n\\n        _previousTaxFee = _taxFee;\\n        _previousLiquidityFee = _liquidityFee;\\n    }\\n\\n    function mint(uint256 amount) public onlyOwner canMint {\\n        require(_tTotal + amount <= MAX, \\\"exceeds limit\\\");\\n\\n        _beforeTokenTransfer(msg.sender, msg.sender, amount);\\n\\n        _tTotal = _tTotal + amount;\\n        _tFeeTotal = _tFeeTotal + amount;\\n\\n        // uint256 tAmount;\\n\\n        // if (_isExcluded[account]) {\\n        //     _tOwned[account] = _tOwned[account].add(amount);\\n        // } else {\\n        //     tAmount = tokenFromReflection(_rOwned[account]);\\n        //     tAmount = tAmount.add(amount);\\n        //     _rOwned[account] = tokenFromReflection(tAmount);\\n        // }\\n\\n        emit MintSuccess(amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount) public onlyOwner canBurn {\\n        require(amount <= MAX, \\\"exceeds limit\\\");\\n\\n        _beforeTokenTransfer(msg.sender, address(0), amount);\\n\\n        _tTotal = _tTotal - amount;\\n        _tFeeTotal = _tFeeTotal + amount;\\n\\n        emit BurnSuccess(amount);\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (_isExcluded[account]) return _tOwned[account];\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _beforeTokenTransfer(msg.sender, recipient, amount);\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address _owner, address spender)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[_owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _beforeTokenTransfer(msg.sender, spender, amount);\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _beforeTokenTransfer(sender, recipient, amount);\\n        _transfer(sender, recipient, amount);\\n        require(\\n            amount <= _allowances[sender][msg.sender],\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        require(\\n            subtractedValue <= _allowances[msg.sender][spender],\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender] - subtractedValue\\n        );\\n        return true;\\n    }\\n\\n    function isExcludedFromReward(address account) public view returns (bool) {\\n        return _isExcluded[account];\\n    }\\n\\n    function totalFees() public view returns (uint256) {\\n        return _tFeeTotal;\\n    }\\n\\n    function minimumTokensBeforeSwapAmount() public view returns (uint256) {\\n        return minimumTokensBeforeSwap;\\n    }\\n\\n    function buyBackUpperLimitAmount() public view returns (uint256) {\\n        return buyBackUpperLimit;\\n    }\\n\\n    function deliver(uint256 tAmount) public {\\n        _beforeTokenTransfer(msg.sender, msg.sender, tAmount);\\n        address sender = msg.sender;\\n        require(\\n            !_isExcluded[sender],\\n            \\\"Excluded addresses cannot call this function\\\"\\n        );\\n        (uint256 rAmount, , , , , ) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender] - rAmount;\\n        _rTotal = _rTotal - rAmount;\\n        _tFeeTotal = _tFeeTotal + tAmount;\\n    }\\n\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\n        if (!deductTransferFee) {\\n            (uint256 rAmount, , , , , ) = _getValues(tAmount);\\n            return rAmount;\\n        } else {\\n            (, uint256 rTransferAmount, , , , ) = _getValues(tAmount);\\n            return rTransferAmount;\\n        }\\n    }\\n\\n    function tokenFromReflection(uint256 rAmount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(\\n            rAmount <= _rTotal,\\n            \\\"Amount must be less than total reflections\\\"\\n        );\\n        uint256 currentRate = _getRate();\\n        return rAmount / currentRate;\\n    }\\n\\n    function excludeFromReward(address account) public onlyOwner {\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\n        if (_rOwned[account] > 0) {\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\n        }\\n        _isExcluded[account] = true;\\n        _excluded.push(account);\\n    }\\n\\n    function includeInReward(address account) external onlyOwner {\\n        require(_isExcluded[account], \\\"Account is already excluded\\\");\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_excluded[i] == account) {\\n                _excluded[i] = _excluded[_excluded.length - 1];\\n                _tOwned[account] = 0;\\n                _isExcluded[account] = false;\\n                _excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _approve(\\n        address _owner,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        require(_owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        if (from != owner && to != owner) {\\n            require(\\n                amount <= _maxTxAmount,\\n                \\\"Transfer amount exceeds the maxTxAmount.\\\"\\n            );\\n        }\\n\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        bool overMinimumTokenBalance = contractTokenBalance >=\\n            minimumTokensBeforeSwap;\\n\\n        if (!inSwapAndLiquify && swapAndLiquifyEnabled && to == UniswapPair) {\\n            if (overMinimumTokenBalance) {\\n                contractTokenBalance = minimumTokensBeforeSwap;\\n                swapTokens(contractTokenBalance);\\n            }\\n            uint256 balance = address(this).balance;\\n            if (buyBackEnabled && balance > uint256(1 * 10**18)) {\\n                if (balance > buyBackUpperLimit) balance = buyBackUpperLimit;\\n\\n                buyBackTokens(balance / 100);\\n            }\\n        }\\n\\n        bool takeFee = true;\\n\\n        //if any account belongs to _isExcludedFromFee account then remove the fee\\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\\n            takeFee = false;\\n        }\\n\\n        _tokenTransfer(from, to, amount, takeFee);\\n    }\\n\\n    function swapTokens(uint256 contractTokenBalance) private lockTheSwap {\\n        uint256 initialBalance = address(this).balance;\\n        swapTokensForETH(contractTokenBalance);\\n        uint256 transferredBalance = address(this).balance - initialBalance;\\n\\n        //Send to Marketing address\\n        transferToAddressETH(\\n            marketingAddress,\\n            (transferredBalance / _liquidityFee) * marketingDivisor\\n        );\\n    }\\n\\n    function buyBackTokens(uint256 amount) private lockTheSwap {\\n        if (amount > 0) {\\n            swapETHForTokens(amount);\\n        }\\n    }\\n\\n    function swapTokensForETH(uint256 tokenAmount) private {\\n        // generate the Uniswap pair path of token -> wETH\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = UniswapRouter.WETH();\\n\\n        _approve(address(this), address(UniswapRouter), tokenAmount);\\n\\n        // make the swap\\n        UniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this), // The contract\\n            block.timestamp\\n        );\\n\\n        emit SwapTokensForETH(tokenAmount, path);\\n    }\\n\\n    function swapETHForTokens(uint256 amount) private {\\n        // generate the Uniswap pair path of token -> wETH\\n        address[] memory path = new address[](2);\\n        path[0] = UniswapRouter.WETH();\\n        path[1] = address(this);\\n\\n        // make the swap\\n        UniswapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{\\n            value: amount\\n        }(\\n            0, // accept any amount of Tokens\\n            path,\\n            deadAddress, // Burn address\\n            block.timestamp + 300\\n        );\\n\\n        emit SwapETHForTokens(amount, path);\\n    }\\n\\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\\n        // approve token transfer to cover all possible scenarios\\n        _approve(address(this), address(UniswapRouter), tokenAmount);\\n\\n        // add the liquidity\\n        UniswapRouter.addLiquidityETH{value: ETHAmount}(\\n            address(this),\\n            tokenAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            owner,\\n            block.timestamp\\n        );\\n    }\\n\\n    function _tokenTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bool takeFee\\n    ) private {\\n        if (!takeFee) removeAllFee();\\n\\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\\n            _transferFromExcluded(sender, recipient, amount);\\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\n            _transferToExcluded(sender, recipient, amount);\\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\n            _transferBothExcluded(sender, recipient, amount);\\n        } else {\\n            _transferStandard(sender, recipient, amount);\\n        }\\n\\n        if (!takeFee) restoreAllFee();\\n    }\\n\\n    function _transferStandard(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity\\n        ) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender] - rAmount;\\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\\n        _takeLiquidity(tLiquidity);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferToExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity\\n        ) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender] - rAmount;\\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\\n        _takeLiquidity(tLiquidity);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferFromExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity\\n        ) = _getValues(tAmount);\\n        _tOwned[sender] = _tOwned[sender] - tAmount;\\n        _rOwned[sender] = _rOwned[sender] - rAmount;\\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\\n        _takeLiquidity(tLiquidity);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferBothExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity\\n        ) = _getValues(tAmount);\\n        _tOwned[sender] = _tOwned[sender] - tAmount;\\n        _rOwned[sender] = _rOwned[sender] - rAmount;\\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\\n        _takeLiquidity(tLiquidity);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\n        _rTotal = _rTotal - rFee;\\n        _tFeeTotal = _tFeeTotal + tFee;\\n    }\\n\\n    function _getValues(uint256 tAmount)\\n        private\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity\\n        ) = _getTValues(tAmount);\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\n            tAmount,\\n            tFee,\\n            tLiquidity,\\n            _getRate()\\n        );\\n        return (\\n            rAmount,\\n            rTransferAmount,\\n            rFee,\\n            tTransferAmount,\\n            tFee,\\n            tLiquidity\\n        );\\n    }\\n\\n    function _getTValues(uint256 tAmount)\\n        private\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 tFee = calculateTaxFee(tAmount);\\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\\n        uint256 tTransferAmount = tAmount - tFee - tLiquidity;\\n        return (tTransferAmount, tFee, tLiquidity);\\n    }\\n\\n    function _getRValues(\\n        uint256 tAmount,\\n        uint256 tFee,\\n        uint256 tLiquidity,\\n        uint256 currentRate\\n    )\\n        private\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 rAmount = tAmount * currentRate;\\n        uint256 rFee = tFee * currentRate;\\n        uint256 rLiquidity = tLiquidity * currentRate;\\n        uint256 rTransferAmount = rAmount - rFee - rLiquidity;\\n        return (rAmount, rTransferAmount, rFee);\\n    }\\n\\n    function _getRate() private view returns (uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply / tSupply;\\n    }\\n\\n    function _getCurrentSupply() private view returns (uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (\\n                _rOwned[_excluded[i]] > rSupply ||\\n                _tOwned[_excluded[i]] > tSupply\\n            ) return (_rTotal, _tTotal);\\n            rSupply = rSupply - _rOwned[_excluded[i]];\\n            tSupply = tSupply - _tOwned[_excluded[i]];\\n        }\\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n\\n    function _takeLiquidity(uint256 tLiquidity) private {\\n        uint256 currentRate = _getRate();\\n        uint256 rLiquidity = tLiquidity * currentRate;\\n        _rOwned[address(this)] = _rOwned[address(this)] + rLiquidity;\\n        if (_isExcluded[address(this)])\\n            _tOwned[address(this)] = _tOwned[address(this)] + tLiquidity;\\n    }\\n\\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\\n        return (_amount * _taxFee) / (10**2);\\n    }\\n\\n    function calculateLiquidityFee(uint256 _amount)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        return (_amount * _liquidityFee) / (10**2);\\n    }\\n\\n    function removeAllFee() private {\\n        if (_taxFee == 0 && _liquidityFee == 0) return;\\n\\n        _previousTaxFee = _taxFee;\\n        _previousLiquidityFee = _liquidityFee;\\n\\n        _taxFee = 0;\\n        _liquidityFee = 0;\\n    }\\n\\n    function restoreAllFee() private {\\n        _taxFee = _previousTaxFee;\\n        _liquidityFee = _previousLiquidityFee;\\n    }\\n\\n    function isExcludedFromFee(address account) public view returns (bool) {\\n        return _isExcludedFromFee[account];\\n    }\\n\\n    function excludeFromFee(address account) public onlyOwner {\\n        _isExcludedFromFee[account] = true;\\n    }\\n\\n    function includeInFee(address account) public onlyOwner {\\n        _isExcludedFromFee[account] = false;\\n    }\\n\\n    function blacklistUpdate(address user, bool value)\\n        public\\n        virtual\\n        onlyOwner\\n        canBlacklist\\n    {\\n        // require(_owner == msg.sender, \\\"Only owner is allowed to modify blacklist.\\\");\\n        _blacklist[user] = value;\\n        emit BlacklistUpdated(user, value);\\n    }\\n\\n    function isBlackListed(address user)\\n        public\\n        view\\n        virtual\\n        canBlacklist\\n        returns (bool)\\n    {\\n        return _blacklist[user];\\n    }\\n\\n    function paused() public view virtual canPause returns (bool) {\\n        return _paused;\\n    }\\n\\n    function _pause() public virtual onlyOwner canPause whenNotPaused {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function _unpause() public virtual onlyOwner canPause whenPaused {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address sender,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        // require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        // require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount >= 0, \\\"ERC20: transfer to the zero address\\\");\\n\\n        if (state.blacklistflag > 0) {\\n            require(\\n                !isBlackListed(sender),\\n                \\\"Token transfer refused. Receiver is on blacklist\\\"\\n            );\\n            require(\\n                !isBlackListed(to),\\n                \\\"Token transfer refused. Receiver is on blacklist\\\"\\n            );\\n        }\\n\\n        if (state.pauseflag > 0) {\\n            require(!paused(), \\\"Token is Paused.\\\");\\n        }\\n    }\\n\\n    function transferToAddressETH(address payable recipient, uint256 amount)\\n        private\\n    {\\n        recipient.transfer(amount);\\n    }\\n\\n    //to recieve ETH from UniswapRouter when swaping\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x855a7922301d2996a3c4639adebb49161c2180b00795206de7774c745481be8a\",\"license\":\"MIT\"},\"contracts/CreateToken/Meter/LiquidityTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./StandardToken.sol\\\";\\nimport \\\"./LiquidityToken.sol\\\";\\n\\ncontract LiquidityTokenFactory {\\n    function deploy(\\n        address router_address,\\n        address creator_,\\n        address reciever,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimal_,\\n        uint256 supply\\n    ) external returns (LiquidityToken) {\\n        return\\n            new LiquidityToken(\\n                creator_,\\n                router_address,\\n                reciever,\\n                decimal_,\\n                supply,\\n                name_,\\n                symbol_\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x74df91d1d3364b516c400a4ffc22faad4dae4918a10173701043ad4d367029fd\",\"license\":\"MIT\"},\"contracts/CreateToken/Meter/SharedStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary SharedStructs {\\n    struct status {\\n        uint256 mintflag;\\n        uint256 pauseflag;\\n        uint256 burnflag;\\n        uint256 blacklistflag;\\n    }\\n}\\n\",\"keccak256\":\"0xd500eabf6e2d999f4ef083083c004b170f8386c6fc44199a75d05cf1a1b46999\",\"license\":\"MIT\"},\"contracts/CreateToken/Meter/StandardToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./SharedStructs.sol\\\";\\n\\ncontract StandardToken is Context, IERC20, IERC20Metadata {\\n    // address public owner;\\n    address public owner;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n    uint256 private _totalSupply;\\n\\n    uint256 public isstandard = 1;\\n\\n    bool private _paused;\\n    SharedStructs.status public state;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    mapping(address => bool) _blacklist;\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    modifier canMint() {\\n        require(state.mintflag > 0, \\\"Mintable: Disabled Mint\\\");\\n        _;\\n    }\\n\\n    modifier canPause() {\\n        require(state.mintflag > 0, \\\"Pausable: Disabled Pause\\\");\\n        _;\\n    }\\n\\n    modifier canBurn() {\\n        require(state.burnflag > 0, \\\"Burnable: Disabled Burn\\\");\\n        _;\\n    }\\n\\n    modifier canBlacklist() {\\n        require(state.blacklistflag > 0, \\\"Blacklist: Disabled Blacklist\\\");\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    event BlacklistUpdated(address indexed user, bool value);\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Sets the values for {name}, {symbol} and {decimals}.\\n     *\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(\\n        address creator_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_,\\n        uint256 tokenSupply_,\\n        SharedStructs.status memory _state\\n    ) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n        owner = creator_;\\n\\n        state = _state;\\n\\n        _mint(creator_, tokenSupply_);\\n\\n        _paused = false;\\n    }\\n\\n    function setStatus(SharedStructs.status memory _state) internal virtual {\\n        state = _state;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address _owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[_owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(\\n            senderBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function mint(address account, uint256 amount)\\n        public\\n        virtual\\n        onlyOwner\\n        canMint\\n    {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount) public virtual onlyOwner canBurn {\\n        require(\\n            _msgSender() != address(0),\\n            \\\"ERC20: burn from the zero address\\\"\\n        );\\n\\n        _beforeTokenTransfer(_msgSender(), address(0), amount);\\n\\n        uint256 accountBalance = _balances[_msgSender()];\\n\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n\\n        _balances[_msgSender()] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(_msgSender(), address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address _owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(_owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[_owner][spender] = amount;\\n        emit Approval(_owner, spender, amount);\\n    }\\n\\n    function blacklistUpdate(address user, bool value)\\n        public\\n        virtual\\n        onlyOwner\\n        canBlacklist\\n    {\\n        // require(_owner == _msgSender(), \\\"Only owner is allowed to modify blacklist.\\\");\\n        _blacklist[user] = value;\\n        emit BlacklistUpdated(user, value);\\n    }\\n\\n    function isBlackListed(address user)\\n        public\\n        view\\n        virtual\\n        canBlacklist\\n        returns (bool)\\n    {\\n        return _blacklist[user];\\n    }\\n\\n    function paused() public view virtual canPause returns (bool) {\\n        return _paused;\\n    }\\n\\n    function _pause() public virtual onlyOwner canPause whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    function _unpause() public virtual onlyOwner canPause whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address sender,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        // require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        // require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount >= 0, \\\"ERC20: transfer to the zero address\\\");\\n\\n        if (state.blacklistflag > 0) {\\n            require(\\n                !isBlackListed(sender),\\n                \\\"Token transfer refused. Receiver is on blacklist\\\"\\n            );\\n            require(\\n                !isBlackListed(to),\\n                \\\"Token transfer refused. Receiver is on blacklist\\\"\\n            );\\n        }\\n\\n        if (state.pauseflag > 0) {\\n            require(!paused(), \\\"Token is Paused.\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x250e60d237d472a99d29f152d1b9008d95c9b9bf8e4867479f2564556d7c54fd\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x651dc139244865751e0db534d2a0f377a6c81ee05564da3d16a48dcf0f719cff\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x39e39f4d5f1358632434b8c9fd524ac150b4ef0f2de6822747aced6ee3970b01\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9b3770413425e82681e46c4f5cada6c5065ed03795bc72d4cff6e118ec0a19e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613e7b806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c8063b304372d1462000033575b600080fd5b6200004a62000044366004620001b1565b62000073565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6000868887858589896040516200008a90620000c6565b6200009c9796959493929190620002e7565b604051809103906000f080158015620000b9573d6000803e3d6000fd5b5098975050505050505050565b613abb806200038b83390190565b803573ffffffffffffffffffffffffffffffffffffffff81168114620000f957600080fd5b919050565b600082601f8301126200011057600080fd5b813567ffffffffffffffff808211156200012e576200012e6200035b565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156200017757620001776200035b565b816040528381528660208588010111156200019157600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600080600060e0888a031215620001cd57600080fd5b620001d888620000d4565b9650620001e860208901620000d4565b9550620001f860408901620000d4565b9450606088013567ffffffffffffffff808211156200021657600080fd5b620002248b838c01620000fe565b955060808a01359150808211156200023b57600080fd5b506200024a8a828b01620000fe565b93505060a088013560ff811681146200026257600080fd5b8092505060c0880135905092959891949750929550565b6000815180845260005b81811015620002a15760208185018101518683018201520162000283565b81811115620002b4576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600073ffffffffffffffffffffffffffffffffffffffff808a168352808916602084015280881660408401525060ff8616606083015284608083015260e060a08301526200033960e083018562000279565b82810360c08401526200034d818562000279565b9a9950505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfe60e06040526ddead00000000000000000000000060805269010f0cf064dd59200000601955681043561a8829300000601a55670de0b6b3a7640000601b556002601d553480156200004f57600080fd5b5060405162003abb38038062003abb83398101604081905262000072916200052c565b81516200008790600c9060208501906200038d565b5080516200009d90600d9060208401906200038d565b50600e805460ff191660ff86161790556040805163c45a015560e01b8152905187916001600160a01b0383169163c45a015591600480820192602092909190829003018186803b158015620000f157600080fd5b505afa15801562000106573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012c919062000507565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156200017557600080fd5b505afa1580156200018a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b0919062000507565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381600087803b158015620001f957600080fd5b505af11580156200020e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000234919062000507565b6001600160601b0319606091821b811660c0529082901b1660a052620002573390565b600280546001600160a01b0319166001600160a01b039290921691909117905562000284888786620002bc565b600954604051908152339060009060008051602062003a9b8339815191529060200160405180910390a350505050505050506200068e565b600080546001600160a01b038085166001600160a01b03199283161790925560018054928616929091169190911790556009819055620002ff8160001962000655565b6200030d90600019620005f2565b600a8190556001600160a01b038416600090815260036020908152604080832093909355601c805462ffff001916905560068152828220805460ff199081166001908117909255308452848420805490911690911790556009549251928352339260008051602062003a9b833981519152910160405180910390a3505050565b8280546200039b9062000618565b90600052602060002090601f016020900481019282620003bf57600085556200040a565b82601f10620003da57805160ff19168380011785556200040a565b828001600101855582156200040a579182015b828111156200040a578251825591602001919060010190620003ed565b50620004189291506200041c565b5090565b5b808211156200041857600081556001016200041d565b80516001600160a01b03811681146200044b57600080fd5b919050565b600082601f8301126200046257600080fd5b81516001600160401b03808211156200047f576200047f62000678565b604051601f8301601f19908116603f01168101908282118183101715620004aa57620004aa62000678565b81604052838152602092508683858801011115620004c757600080fd5b600091505b83821015620004eb5785820183015181830184015290820190620004cc565b83821115620004fd5760008385830101525b9695505050505050565b6000602082840312156200051a57600080fd5b620005258262000433565b9392505050565b600080600080600080600060e0888a0312156200054857600080fd5b620005538862000433565b9650620005636020890162000433565b9550620005736040890162000433565b9450606088015160ff811681146200058a57600080fd5b608089015160a08a015191955093506001600160401b0380821115620005af57600080fd5b620005bd8b838c0162000450565b935060c08a0151915080821115620005d457600080fd5b50620005e38a828b0162000450565b91505092959891949750929550565b6000828210156200061357634e487b7160e01b600052601160045260246000fd5b500390565b600181811c908216806200062d57607f821691505b602082108114156200064f57634e487b7160e01b600052602260045260246000fd5b50919050565b6000826200067357634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052604160045260246000fd5b60805160601c60a05160601c60c05160601c6133a3620006f860003960008181610677015261210301526000818161083c0152818161269a01528181612762015281816127b7015281816128bd01526129ab0152600081816103e501526129d601526133a36000f3fe6080604052600436106102f65760003560e01c80636053a0e31161018f578063a457c2d7116100e1578063c7639d801161008a578063e47d606011610064578063e47d6060146108ba578063ea2f0b37146108da578063fc8234cb146108fa57600080fd5b8063c7639d801461082a578063d6b513cf1461085e578063dd62ed3e1461087457600080fd5b8063b351dfe8116100bb578063b351dfe8146107b2578063bdc653ef146107d2578063c19d93fb146107e757600080fd5b8063a457c2d714610752578063a5ece94114610772578063a9059cbb1461079257600080fd5b80637d1db4a51161014357806395d89b411161011d57806395d89b4114610708578063a0712d681461071d578063a073d37f1461073d57600080fd5b80637d1db4a51461069957806388f82020146106af5780638da5cb5b146106e857600080fd5b80636bc87c3a116101745780636bc87c3a1461062f57806370a082311461064557806378a63f341461066557600080fd5b80636053a0e3146105ef57806367d246561461060f57600080fd5b806339509351116102485780634549b039116101fc57806352390c02116101d657806352390c02146105815780635342acb4146105a15780635c975abb146105da57600080fd5b80634549b0391461052c57806349538af41461054c5780634a74bb021461056257600080fd5b80633bd5d1731161022d5780633bd5d173146104cc57806342966c68146104ec578063437823ec1461050c57600080fd5b806339509351146104965780633b124fe7146104b657600080fd5b8063245e5798116102aa578063313ce56711610284578063313ce5671461043f578063320b2ad9146104615780633685d4191461047657600080fd5b8063245e5798146103b157806327c8f835146103d35780632d8381191461041f57600080fd5b806313114a9d116102db57806313114a9d1461035d57806318160ddd1461037c57806323b872dd1461039157600080fd5b806306fdde0314610302578063095ea7b31461032d57600080fd5b366102fd57005b600080fd5b34801561030e57600080fd5b5061031761090f565b60405161032491906130b0565b60405180910390f35b34801561033957600080fd5b5061034d610348366004612f17565b6109a1565b6040519015158152602001610324565b34801561036957600080fd5b50600b545b604051908152602001610324565b34801561038857600080fd5b5060095461036e565b34801561039d57600080fd5b5061034d6103ac366004612ea1565b6109c3565b3480156103bd57600080fd5b506103d16103cc366004612f43565b610abe565b005b3480156103df57600080fd5b506104077f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610324565b34801561042b57600080fd5b5061036e61043a366004612f89565b610b36565b34801561044b57600080fd5b50600e5460405160ff9091168152602001610324565b34801561046d57600080fd5b506103d1610bcd565b34801561048257600080fd5b506103d1610491366004612e2e565b610d1b565b3480156104a257600080fd5b5061034d6104b1366004612f17565b610f3d565b3480156104c257600080fd5b5061036e60145481565b3480156104d857600080fd5b506103d16104e7366004612f89565b610f74565b3480156104f857600080fd5b506103d1610507366004612f89565b61107c565b34801561051857600080fd5b506103d1610527366004612e2e565b611195565b34801561053857600080fd5b5061036e610547366004613014565b61121e565b34801561055857600080fd5b5061036e601d5481565b34801561056e57600080fd5b50601c5461034d90610100900460ff1681565b34801561058d57600080fd5b506103d161059c366004612e2e565b6112ab565b3480156105ad57600080fd5b5061034d6105bc366004612e2e565b6001600160a01b031660009081526006602052604090205460ff1690565b3480156105e657600080fd5b5061034d611451565b3480156105fb57600080fd5b50601c5461034d9062010000900460ff1681565b34801561061b57600080fd5b506103d161062a366004612fa2565b6114b2565b34801561063b57600080fd5b5061036e60165481565b34801561065157600080fd5b5061036e610660366004612e2e565b6115d3565b34801561067157600080fd5b506104077f000000000000000000000000000000000000000000000000000000000000000081565b3480156106a557600080fd5b5061036e60195481565b3480156106bb57600080fd5b5061034d6106ca366004612e2e565b6001600160a01b031660009081526007602052604090205460ff1690565b3480156106f457600080fd5b50600154610407906001600160a01b031681565b34801561071457600080fd5b50610317611632565b34801561072957600080fd5b506103d1610738366004612f89565b611641565b34801561074957600080fd5b50601a5461036e565b34801561075e57600080fd5b5061034d61076d366004612f17565b6117b1565b34801561077e57600080fd5b50600054610407906001600160a01b031681565b34801561079e57600080fd5b5061034d6107ad366004612f17565b611880565b3480156107be57600080fd5b506103d16107cd366004612ee2565b611898565b3480156107de57600080fd5b50601b5461036e565b3480156107f357600080fd5b50600f5460105460115460125461080a9392919084565b604080519485526020850193909352918301526060820152608001610324565b34801561083657600080fd5b506104077f000000000000000000000000000000000000000000000000000000000000000081565b34801561086a57600080fd5b5061036e60185481565b34801561088057600080fd5b5061036e61088f366004612e68565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b3480156108c657600080fd5b5061034d6108d5366004612e2e565b6119ab565b3480156108e657600080fd5b506103d16108f5366004612e2e565b611a20565b34801561090657600080fd5b506103d1611aa6565b6060600c805461091e90613259565b80601f016020809104026020016040519081016040528092919081815260200182805461094a90613259565b80156109975780601f1061096c57610100808354040283529160200191610997565b820191906000526020600020905b81548152906001019060200180831161097a57829003601f168201915b5050505050905090565b60006109ae338484611be9565b6109b9338484611d4b565b5060015b92915050565b60006109d0848484611be9565b6109db848484611eb4565b6001600160a01b0384166000908152600560209081526040808320338452909152902054821115610a795760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6001600160a01b038416600090815260056020908152604080832033808552925290912054610ab4918691610aaf908690613242565b611d4b565b5060019392505050565b6002546001600160a01b03163314610b185760405162461bcd60e51b815260206004820181905260248201527f4d616e6167653a63616c6c6572206973206e6f7420746865206d616e616765726044820152606401610a70565b8051600f556020810151601055604081015160115560600151601255565b6000600a54821115610bb05760405162461bcd60e51b815260206004820152602a60248201527f416d6f756e74206d757374206265206c657373207468616e20746f74616c207260448201527f65666c656374696f6e73000000000000000000000000000000000000000000006064820152608401610a70565b6000610bba6121f9565b9050610bc681846131e8565b9392505050565b6001546001600160a01b03163314610c325760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a2063616c6c6572206973206e6f742074686520637265617460448201526137b960f11b6064820152608401610a70565b600f54610c815760405162461bcd60e51b815260206004820152601860248201527f5061757361626c653a2044697361626c656420506175736500000000000000006044820152606401610a70565b610c89611451565b15610cd65760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610a70565b600e805461ff0019166101001790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258906020015b60405180910390a1565b6001546001600160a01b03163314610d805760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a2063616c6c6572206973206e6f742074686520637265617460448201526137b960f11b6064820152608401610a70565b6001600160a01b03811660009081526007602052604090205460ff16610de85760405162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c7265616479206578636c7564656400000000006044820152606401610a70565b60005b600854811015610f3957816001600160a01b031660088281548110610e1257610e12613326565b6000918252602090912001546001600160a01b03161415610f275760088054610e3d90600190613242565b81548110610e4d57610e4d613326565b600091825260209091200154600880546001600160a01b039092169183908110610e7957610e79613326565b600091825260208083209190910180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039485161790559184168152600482526040808220829055600790925220805460ff191690556008805480610ee957610ee96132f7565b600082815260209020810160001990810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690550190555050565b80610f31816132ad565b915050610deb565b5050565b3360008181526005602090815260408083206001600160a01b038716845290915281205490916109b9918590610aaf9086906131d0565b610f7f333383611be9565b3360008181526007602052604090205460ff16156110055760405162461bcd60e51b815260206004820152602c60248201527f4578636c75646564206164647265737365732063616e6e6f742063616c6c207460448201527f6869732066756e6374696f6e00000000000000000000000000000000000000006064820152608401610a70565b60006110108361221c565b505050506001600160a01b03841660009081526003602052604090205491925061103c91839150613242565b6001600160a01b038316600090815260036020526040902055600a54611063908290613242565b600a55600b546110749084906131d0565b600b55505050565b6001546001600160a01b031633146110e15760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a2063616c6c6572206973206e6f742074686520637265617460448201526137b960f11b6064820152608401610a70565b6011546111305760405162461bcd60e51b815260206004820152601760248201527f4275726e61626c653a2044697361626c6564204275726e0000000000000000006044820152606401610a70565b61113c33600083611be9565b8060095461114a9190613242565b600955600b5461115b9082906131d0565b600b556040518181527fb3871d378eeb4c3372ea4c46076e44c52a1b329359d0f7f90c7b03ee8c0792ce906020015b60405180910390a150565b6001546001600160a01b031633146111fa5760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a2063616c6c6572206973206e6f742074686520637265617460448201526137b960f11b6064820152608401610a70565b6001600160a01b03166000908152600660205260409020805460ff19166001179055565b60006009548311156112725760405162461bcd60e51b815260206004820152601f60248201527f416d6f756e74206d757374206265206c657373207468616e20737570706c79006044820152606401610a70565b816112915760006112828461221c565b509395506109bd945050505050565b600061129c8461221c565b509295506109bd945050505050565b6001546001600160a01b031633146113105760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a2063616c6c6572206973206e6f742074686520637265617460448201526137b960f11b6064820152608401610a70565b6001600160a01b03811660009081526007602052604090205460ff16156113795760405162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c7265616479206578636c7564656400000000006044820152606401610a70565b6001600160a01b038116600090815260036020526040902054156113d3576001600160a01b0381166000908152600360205260409020546113b990610b36565b6001600160a01b0382166000908152600460205260409020555b6001600160a01b03166000818152600760205260408120805460ff191660019081179091556008805491820181559091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055565b600f546000906114a35760405162461bcd60e51b815260206004820152601860248201527f5061757361626c653a2044697361626c656420506175736500000000000000006044820152606401610a70565b50600e54610100900460ff1690565b6002546001600160a01b0316331461150c5760405162461bcd60e51b815260206004820181905260248201527f4d616e6167653a63616c6c6572206973206e6f7420746865206d616e616765726044820152606401610a70565b811580159061151c575081600114155b1561153157601c805461ff0019166101001790555b81600114806115405750816002145b1561157357601c80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff16620100001790555b8160031461158957805160145560208101516018555b81600114806115985750816002145b156115a65760408101516018555b81600314806115b55750816004145b156115c35760608101516016555b5050601454601555601654601755565b6001600160a01b03811660009081526007602052604081205460ff161561161057506001600160a01b031660009081526004602052604090205490565b6001600160a01b0382166000908152600360205260409020546109bd90610b36565b6060600d805461091e90613259565b6001546001600160a01b031633146116a65760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a2063616c6c6572206973206e6f742074686520637265617460448201526137b960f11b6064820152608401610a70565b600f546116f55760405162461bcd60e51b815260206004820152601760248201527f4d696e7461626c653a2044697361626c6564204d696e740000000000000000006044820152606401610a70565b6000198160095461170691906131d0565b11156117545760405162461bcd60e51b815260206004820152600d60248201527f65786365656473206c696d6974000000000000000000000000000000000000006044820152606401610a70565b61175f333383611be9565b8060095461176d91906131d0565b600955600b5461177e9082906131d0565b600b556040518181527fdd779ccd34929e417fc56a3ffb2acea0e3ce9ff756ef2107f4a75b6b00132aeb9060200161118a565b3360009081526005602090815260408083206001600160a01b038616845290915281205482111561184a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610a70565b3360008181526005602090815260408083206001600160a01b03881684529091529020546109b991908590610aaf908690613242565b600061188d338484611be9565b6109b9338484611eb4565b6001546001600160a01b031633146118fd5760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a2063616c6c6572206973206e6f742074686520637265617460448201526137b960f11b6064820152608401610a70565b60125461194c5760405162461bcd60e51b815260206004820152601d60248201527f426c61636b6c6973743a2044697361626c656420426c61636b6c6973740000006044820152606401610a70565b6001600160a01b038216600081815260136020908152604091829020805460ff191685151590811790915591519182527f6a12b3df6cba4203bd7fd06b816789f87de8c594299aed5717ae070fac781bac910160405180910390a25050565b6012546000906119fd5760405162461bcd60e51b815260206004820152601d60248201527f426c61636b6c6973743a2044697361626c656420426c61636b6c6973740000006044820152606401610a70565b506001600160a01b03811660009081526013602052604090205460ff165b919050565b6001546001600160a01b03163314611a855760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a2063616c6c6572206973206e6f742074686520637265617460448201526137b960f11b6064820152608401610a70565b6001600160a01b03166000908152600660205260409020805460ff19169055565b6001546001600160a01b03163314611b0b5760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a2063616c6c6572206973206e6f742074686520637265617460448201526137b960f11b6064820152608401610a70565b600f54611b5a5760405162461bcd60e51b815260206004820152601860248201527f5061757361626c653a2044697361626c656420506175736500000000000000006044820152606401610a70565b611b62611451565b611bae5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610a70565b600e805461ff00191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602001610d11565b60125415611ce957611bfa836119ab565b15611c6d5760405162461bcd60e51b815260206004820152603060248201527f546f6b656e207472616e7366657220726566757365642e20526563656976657260448201527f206973206f6e20626c61636b6c697374000000000000000000000000000000006064820152608401610a70565b611c76826119ab565b15611ce95760405162461bcd60e51b815260206004820152603060248201527f546f6b656e207472616e7366657220726566757365642e20526563656976657260448201527f206973206f6e20626c61636b6c697374000000000000000000000000000000006064820152608401610a70565b60105415611d4657611cf9611451565b15611d465760405162461bcd60e51b815260206004820152601060248201527f546f6b656e206973205061757365642e000000000000000000000000000000006044820152606401610a70565b505050565b6001600160a01b038316611dc65760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610a70565b6001600160a01b038216611e425760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610a70565b600180546001600160a01b039081166000908152600560209081526040808320878516808552925291829020859055925490519116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590611ea79085815260200190565b60405180910390a3505050565b6001600160a01b038316611f305760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610a70565b6001600160a01b038216611fac5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610a70565b600081116120225760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d75737420626520677265617465722060448201527f7468616e207a65726f00000000000000000000000000000000000000000000006064820152608401610a70565b6001546001600160a01b0384811691161480159061204e57506001546001600160a01b03838116911614155b156120cb576019548111156120cb5760405162461bcd60e51b815260206004820152602860248201527f5472616e7366657220616d6f756e74206578636565647320746865206d61785460448201527f78416d6f756e742e0000000000000000000000000000000000000000000000006064820152608401610a70565b60006120d6306115d3565b601a54601c549192508210159060ff161580156120fa5750601c54610100900460ff165b801561213757507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b1561219a57801561215057601a5491506121508261226b565b601c54479062010000900460ff1680156121715750670de0b6b3a764000081115b1561219857601b548111156121855750601b545b6121986121936064836131e8565b6122d2565b505b6001600160a01b03851660009081526006602052604090205460019060ff16806121dc57506001600160a01b03851660009081526006602052604090205460ff165b156121e5575060005b6121f1868686846122fb565b505050505050565b6000806000612206612426565b909250905061221581836131e8565b9250505090565b60008060008060008060008060006122338a6125a9565b92509250925060008060006122518d868661224c6121f9565b6125ec565b919f909e50909c50959a5093985091965092945050505050565b601c805460ff191660011790554761228282612643565b600061228e8247613242565b6000546018546016549293506122c3926001600160a01b03909216916122b490856131e8565b6122be9190613223565b612864565b5050601c805460ff1916905550565b601c805460ff1916600117905580156122ee576122ee8161289a565b50601c805460ff19169055565b8061230857612308612a83565b6001600160a01b03841660009081526007602052604090205460ff16801561234957506001600160a01b03831660009081526007602052604090205460ff16155b1561235e57612359848484612ab1565b61240a565b6001600160a01b03841660009081526007602052604090205460ff1615801561239f57506001600160a01b03831660009081526007602052604090205460ff165b156123af57612359848484612bda565b6001600160a01b03841660009081526007602052604090205460ff1680156123ef57506001600160a01b03831660009081526007602052604090205460ff165b156123ff57612359848484612c86565b61240a848484612cfb565b8061242057612420601554601455601754601655565b50505050565b600a546009546000918291825b6008548110156125785782600360006008848154811061245557612455613326565b60009182526020808320909101546001600160a01b0316835282019290925260400190205411806124c0575081600460006008848154811061249957612499613326565b60009182526020808320909101546001600160a01b03168352820192909252604001902054115b156124d657600a54600954945094505050509091565b60036000600883815481106124ed576124ed613326565b60009182526020808320909101546001600160a01b0316835282019290925260400190205461251c9084613242565b9250600460006008838154811061253557612535613326565b60009182526020808320909101546001600160a01b031683528201929092526040019020546125649083613242565b915080612570816132ad565b915050612433565b50600954600a5461258991906131e8565b8210156125a057600a546009549350935050509091565b90939092509050565b6000806000806125b885612d40565b905060006125c586612d5c565b90506000816125d48489613242565b6125de9190613242565b979296509094509092505050565b60008080806125fb8589613223565b905060006126098689613223565b905060006126178789613223565b90506000816126268486613242565b6126309190613242565b939b939a50919850919650505050505050565b604080516002808252606082018352600092602083019080368337019050509050308160008151811061267857612678613326565b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156126f157600080fd5b505afa158015612705573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127299190612e4b565b8160018151811061273c5761273c613326565b60200260200101906001600160a01b031690816001600160a01b031681525050612787307f000000000000000000000000000000000000000000000000000000000000000084611d4b565b6040517f791ac9470000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063791ac947906127f5908590600090869030904290600401613144565b600060405180830381600087803b15801561280f57600080fd5b505af1158015612823573d6000803e3d6000fd5b505050507f32cde87eb454f3a0b875ab23547023107cfad454363ec88ba5695e2c24aa52a78282604051612858929190613123565b60405180910390a15050565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611d46573d6000803e3d6000fd5b6040805160028082526060820183526000926020830190803683370190505090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561291457600080fd5b505afa158015612928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294c9190612e4b565b8160008151811061295f5761295f613326565b60200260200101906001600160a01b031690816001600160a01b031681525050308160018151811061299357612993613326565b6001600160a01b0392831660209182029290920101527f00000000000000000000000000000000000000000000000000000000000000001663b6f9de95836000847f0000000000000000000000000000000000000000000000000000000000000000612a014261012c6131d0565b6040518663ffffffff1660e01b8152600401612a20949392919061307b565b6000604051808303818588803b158015612a3957600080fd5b505af1158015612a4d573d6000803e3d6000fd5b50505050507f6fd378a9d8b7345c2e5b18229aaf1e39d32b177b501d0a0d26a0a858a23a96248282604051612858929190613123565b601454158015612a935750601654155b15612a9a57565b601480546015556016805460175560009182905555565b600080600080600080612ac38761221c565b6001600160a01b038f16600090815260046020526040902054959b50939950919750955093509150612af6908890613242565b6001600160a01b038a16600090815260046020908152604080832093909355600390522054612b26908790613242565b6001600160a01b03808b1660009081526003602052604080822093909355908a1681522054612b569086906131d0565b6001600160a01b038916600090815260036020526040902055612b7881612d6e565b612b828483612df8565b876001600160a01b0316896001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef85604051612bc791815260200190565b60405180910390a3505050505050505050565b600080600080600080612bec8761221c565b6001600160a01b038f16600090815260036020526040902054959b50939950919750955093509150612c1f908790613242565b6001600160a01b03808b16600090815260036020908152604080832094909455918b16815260049091522054612c569084906131d0565b6001600160a01b038916600090815260046020908152604080832093909355600390522054612b569086906131d0565b600080600080600080612c988761221c565b6001600160a01b038f16600090815260046020526040902054959b50939950919750955093509150612ccb908890613242565b6001600160a01b038a16600090815260046020908152604080832093909355600390522054612c1f908790613242565b600080600080600080612d0d8761221c565b6001600160a01b038f16600090815260036020526040902054959b50939950919750955093509150612b26908790613242565b6000606460145483612d529190613223565b6109bd91906131e8565b6000606460165483612d529190613223565b6000612d786121f9565b90506000612d868284613223565b30600090815260036020526040902054909150612da49082906131d0565b3060009081526003602090815260408083209390935560079052205460ff1615611d465730600090815260046020526040902054612de39084906131d0565b30600090815260046020526040902055505050565b81600a54612e069190613242565b600a55600b54612e179082906131d0565b600b555050565b80358015158114611a1b57600080fd5b600060208284031215612e4057600080fd5b8135610bc681613355565b600060208284031215612e5d57600080fd5b8151610bc681613355565b60008060408385031215612e7b57600080fd5b8235612e8681613355565b91506020830135612e9681613355565b809150509250929050565b600080600060608486031215612eb657600080fd5b8335612ec181613355565b92506020840135612ed181613355565b929592945050506040919091013590565b60008060408385031215612ef557600080fd5b8235612f0081613355565b9150612f0e60208401612e1e565b90509250929050565b60008060408385031215612f2a57600080fd5b8235612f3581613355565b946020939093013593505050565b600060808284031215612f5557600080fd5b612f5d613180565b823581526020830135602082015260408301356040820152606083013560608201528091505092915050565b600060208284031215612f9b57600080fd5b5035919050565b60008060a08385031215612fb557600080fd5b82359150602084603f850112612fca57600080fd5b612fd2613180565b808286018760a088011115612fe657600080fd5b60005b600481101561300657813584529284019290840190600101612fe9565b509497909650945050505050565b6000806040838503121561302757600080fd5b82359150612f0e60208401612e1e565b600081518084526020808501945080840160005b838110156130705781516001600160a01b03168752958201959082019060010161304b565b509495945050505050565b8481526080602082015260006130946080830186613037565b6001600160a01b03949094166040830152506060015292915050565b600060208083528351808285015260005b818110156130dd578581018301518582016040015282016130c1565b818111156130ef576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b82815260406020820152600061313c6040830184613037565b949350505050565b85815284602082015260a06040820152600061316360a0830186613037565b6001600160a01b0394909416606083015250608001529392505050565b6040516080810167ffffffffffffffff811182821017156131ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b600082198211156131e3576131e36132c8565b500190565b60008261321e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600081600019048311821515161561323d5761323d6132c8565b500290565b600082821015613254576132546132c8565b500390565b600181811c9082168061326d57607f821691505b602082108114156132a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60006000198214156132c1576132c16132c8565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6001600160a01b038116811461336a57600080fd5b5056fea26469706673582212201456a18eac152b130e5e53f2b633997f1a1c05757d020ffcfc43ac26083cb50764736f6c63430008070033ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122066a4c09fef59a45e05cb955adba8455796e21eadbfad30a3ce8597dbe355be6d64736f6c63430008070033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200002e5760003560e01c8063b304372d1462000033575b600080fd5b6200004a62000044366004620001b1565b62000073565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6000868887858589896040516200008a90620000c6565b6200009c9796959493929190620002e7565b604051809103906000f080158015620000b9573d6000803e3d6000fd5b5098975050505050505050565b613abb806200038b83390190565b803573ffffffffffffffffffffffffffffffffffffffff81168114620000f957600080fd5b919050565b600082601f8301126200011057600080fd5b813567ffffffffffffffff808211156200012e576200012e6200035b565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156200017757620001776200035b565b816040528381528660208588010111156200019157600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600080600060e0888a031215620001cd57600080fd5b620001d888620000d4565b9650620001e860208901620000d4565b9550620001f860408901620000d4565b9450606088013567ffffffffffffffff808211156200021657600080fd5b620002248b838c01620000fe565b955060808a01359150808211156200023b57600080fd5b506200024a8a828b01620000fe565b93505060a088013560ff811681146200026257600080fd5b8092505060c0880135905092959891949750929550565b6000815180845260005b81811015620002a15760208185018101518683018201520162000283565b81811115620002b4576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600073ffffffffffffffffffffffffffffffffffffffff808a168352808916602084015280881660408401525060ff8616606083015284608083015260e060a08301526200033960e083018562000279565b82810360c08401526200034d818562000279565b9a9950505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfe60e06040526ddead00000000000000000000000060805269010f0cf064dd59200000601955681043561a8829300000601a55670de0b6b3a7640000601b556002601d553480156200004f57600080fd5b5060405162003abb38038062003abb83398101604081905262000072916200052c565b81516200008790600c9060208501906200038d565b5080516200009d90600d9060208401906200038d565b50600e805460ff191660ff86161790556040805163c45a015560e01b8152905187916001600160a01b0383169163c45a015591600480820192602092909190829003018186803b158015620000f157600080fd5b505afa15801562000106573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012c919062000507565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156200017557600080fd5b505afa1580156200018a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b0919062000507565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381600087803b158015620001f957600080fd5b505af11580156200020e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000234919062000507565b6001600160601b0319606091821b811660c0529082901b1660a052620002573390565b600280546001600160a01b0319166001600160a01b039290921691909117905562000284888786620002bc565b600954604051908152339060009060008051602062003a9b8339815191529060200160405180910390a350505050505050506200068e565b600080546001600160a01b038085166001600160a01b03199283161790925560018054928616929091169190911790556009819055620002ff8160001962000655565b6200030d90600019620005f2565b600a8190556001600160a01b038416600090815260036020908152604080832093909355601c805462ffff001916905560068152828220805460ff199081166001908117909255308452848420805490911690911790556009549251928352339260008051602062003a9b833981519152910160405180910390a3505050565b8280546200039b9062000618565b90600052602060002090601f016020900481019282620003bf57600085556200040a565b82601f10620003da57805160ff19168380011785556200040a565b828001600101855582156200040a579182015b828111156200040a578251825591602001919060010190620003ed565b50620004189291506200041c565b5090565b5b808211156200041857600081556001016200041d565b80516001600160a01b03811681146200044b57600080fd5b919050565b600082601f8301126200046257600080fd5b81516001600160401b03808211156200047f576200047f62000678565b604051601f8301601f19908116603f01168101908282118183101715620004aa57620004aa62000678565b81604052838152602092508683858801011115620004c757600080fd5b600091505b83821015620004eb5785820183015181830184015290820190620004cc565b83821115620004fd5760008385830101525b9695505050505050565b6000602082840312156200051a57600080fd5b620005258262000433565b9392505050565b600080600080600080600060e0888a0312156200054857600080fd5b620005538862000433565b9650620005636020890162000433565b9550620005736040890162000433565b9450606088015160ff811681146200058a57600080fd5b608089015160a08a015191955093506001600160401b0380821115620005af57600080fd5b620005bd8b838c0162000450565b935060c08a0151915080821115620005d457600080fd5b50620005e38a828b0162000450565b91505092959891949750929550565b6000828210156200061357634e487b7160e01b600052601160045260246000fd5b500390565b600181811c908216806200062d57607f821691505b602082108114156200064f57634e487b7160e01b600052602260045260246000fd5b50919050565b6000826200067357634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052604160045260246000fd5b60805160601c60a05160601c60c05160601c6133a3620006f860003960008181610677015261210301526000818161083c0152818161269a01528181612762015281816127b7015281816128bd01526129ab0152600081816103e501526129d601526133a36000f3fe6080604052600436106102f65760003560e01c80636053a0e31161018f578063a457c2d7116100e1578063c7639d801161008a578063e47d606011610064578063e47d6060146108ba578063ea2f0b37146108da578063fc8234cb146108fa57600080fd5b8063c7639d801461082a578063d6b513cf1461085e578063dd62ed3e1461087457600080fd5b8063b351dfe8116100bb578063b351dfe8146107b2578063bdc653ef146107d2578063c19d93fb146107e757600080fd5b8063a457c2d714610752578063a5ece94114610772578063a9059cbb1461079257600080fd5b80637d1db4a51161014357806395d89b411161011d57806395d89b4114610708578063a0712d681461071d578063a073d37f1461073d57600080fd5b80637d1db4a51461069957806388f82020146106af5780638da5cb5b146106e857600080fd5b80636bc87c3a116101745780636bc87c3a1461062f57806370a082311461064557806378a63f341461066557600080fd5b80636053a0e3146105ef57806367d246561461060f57600080fd5b806339509351116102485780634549b039116101fc57806352390c02116101d657806352390c02146105815780635342acb4146105a15780635c975abb146105da57600080fd5b80634549b0391461052c57806349538af41461054c5780634a74bb021461056257600080fd5b80633bd5d1731161022d5780633bd5d173146104cc57806342966c68146104ec578063437823ec1461050c57600080fd5b806339509351146104965780633b124fe7146104b657600080fd5b8063245e5798116102aa578063313ce56711610284578063313ce5671461043f578063320b2ad9146104615780633685d4191461047657600080fd5b8063245e5798146103b157806327c8f835146103d35780632d8381191461041f57600080fd5b806313114a9d116102db57806313114a9d1461035d57806318160ddd1461037c57806323b872dd1461039157600080fd5b806306fdde0314610302578063095ea7b31461032d57600080fd5b366102fd57005b600080fd5b34801561030e57600080fd5b5061031761090f565b60405161032491906130b0565b60405180910390f35b34801561033957600080fd5b5061034d610348366004612f17565b6109a1565b6040519015158152602001610324565b34801561036957600080fd5b50600b545b604051908152602001610324565b34801561038857600080fd5b5060095461036e565b34801561039d57600080fd5b5061034d6103ac366004612ea1565b6109c3565b3480156103bd57600080fd5b506103d16103cc366004612f43565b610abe565b005b3480156103df57600080fd5b506104077f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610324565b34801561042b57600080fd5b5061036e61043a366004612f89565b610b36565b34801561044b57600080fd5b50600e5460405160ff9091168152602001610324565b34801561046d57600080fd5b506103d1610bcd565b34801561048257600080fd5b506103d1610491366004612e2e565b610d1b565b3480156104a257600080fd5b5061034d6104b1366004612f17565b610f3d565b3480156104c257600080fd5b5061036e60145481565b3480156104d857600080fd5b506103d16104e7366004612f89565b610f74565b3480156104f857600080fd5b506103d1610507366004612f89565b61107c565b34801561051857600080fd5b506103d1610527366004612e2e565b611195565b34801561053857600080fd5b5061036e610547366004613014565b61121e565b34801561055857600080fd5b5061036e601d5481565b34801561056e57600080fd5b50601c5461034d90610100900460ff1681565b34801561058d57600080fd5b506103d161059c366004612e2e565b6112ab565b3480156105ad57600080fd5b5061034d6105bc366004612e2e565b6001600160a01b031660009081526006602052604090205460ff1690565b3480156105e657600080fd5b5061034d611451565b3480156105fb57600080fd5b50601c5461034d9062010000900460ff1681565b34801561061b57600080fd5b506103d161062a366004612fa2565b6114b2565b34801561063b57600080fd5b5061036e60165481565b34801561065157600080fd5b5061036e610660366004612e2e565b6115d3565b34801561067157600080fd5b506104077f000000000000000000000000000000000000000000000000000000000000000081565b3480156106a557600080fd5b5061036e60195481565b3480156106bb57600080fd5b5061034d6106ca366004612e2e565b6001600160a01b031660009081526007602052604090205460ff1690565b3480156106f457600080fd5b50600154610407906001600160a01b031681565b34801561071457600080fd5b50610317611632565b34801561072957600080fd5b506103d1610738366004612f89565b611641565b34801561074957600080fd5b50601a5461036e565b34801561075e57600080fd5b5061034d61076d366004612f17565b6117b1565b34801561077e57600080fd5b50600054610407906001600160a01b031681565b34801561079e57600080fd5b5061034d6107ad366004612f17565b611880565b3480156107be57600080fd5b506103d16107cd366004612ee2565b611898565b3480156107de57600080fd5b50601b5461036e565b3480156107f357600080fd5b50600f5460105460115460125461080a9392919084565b604080519485526020850193909352918301526060820152608001610324565b34801561083657600080fd5b506104077f000000000000000000000000000000000000000000000000000000000000000081565b34801561086a57600080fd5b5061036e60185481565b34801561088057600080fd5b5061036e61088f366004612e68565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b3480156108c657600080fd5b5061034d6108d5366004612e2e565b6119ab565b3480156108e657600080fd5b506103d16108f5366004612e2e565b611a20565b34801561090657600080fd5b506103d1611aa6565b6060600c805461091e90613259565b80601f016020809104026020016040519081016040528092919081815260200182805461094a90613259565b80156109975780601f1061096c57610100808354040283529160200191610997565b820191906000526020600020905b81548152906001019060200180831161097a57829003601f168201915b5050505050905090565b60006109ae338484611be9565b6109b9338484611d4b565b5060015b92915050565b60006109d0848484611be9565b6109db848484611eb4565b6001600160a01b0384166000908152600560209081526040808320338452909152902054821115610a795760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6001600160a01b038416600090815260056020908152604080832033808552925290912054610ab4918691610aaf908690613242565b611d4b565b5060019392505050565b6002546001600160a01b03163314610b185760405162461bcd60e51b815260206004820181905260248201527f4d616e6167653a63616c6c6572206973206e6f7420746865206d616e616765726044820152606401610a70565b8051600f556020810151601055604081015160115560600151601255565b6000600a54821115610bb05760405162461bcd60e51b815260206004820152602a60248201527f416d6f756e74206d757374206265206c657373207468616e20746f74616c207260448201527f65666c656374696f6e73000000000000000000000000000000000000000000006064820152608401610a70565b6000610bba6121f9565b9050610bc681846131e8565b9392505050565b6001546001600160a01b03163314610c325760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a2063616c6c6572206973206e6f742074686520637265617460448201526137b960f11b6064820152608401610a70565b600f54610c815760405162461bcd60e51b815260206004820152601860248201527f5061757361626c653a2044697361626c656420506175736500000000000000006044820152606401610a70565b610c89611451565b15610cd65760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610a70565b600e805461ff0019166101001790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258906020015b60405180910390a1565b6001546001600160a01b03163314610d805760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a2063616c6c6572206973206e6f742074686520637265617460448201526137b960f11b6064820152608401610a70565b6001600160a01b03811660009081526007602052604090205460ff16610de85760405162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c7265616479206578636c7564656400000000006044820152606401610a70565b60005b600854811015610f3957816001600160a01b031660088281548110610e1257610e12613326565b6000918252602090912001546001600160a01b03161415610f275760088054610e3d90600190613242565b81548110610e4d57610e4d613326565b600091825260209091200154600880546001600160a01b039092169183908110610e7957610e79613326565b600091825260208083209190910180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039485161790559184168152600482526040808220829055600790925220805460ff191690556008805480610ee957610ee96132f7565b600082815260209020810160001990810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690550190555050565b80610f31816132ad565b915050610deb565b5050565b3360008181526005602090815260408083206001600160a01b038716845290915281205490916109b9918590610aaf9086906131d0565b610f7f333383611be9565b3360008181526007602052604090205460ff16156110055760405162461bcd60e51b815260206004820152602c60248201527f4578636c75646564206164647265737365732063616e6e6f742063616c6c207460448201527f6869732066756e6374696f6e00000000000000000000000000000000000000006064820152608401610a70565b60006110108361221c565b505050506001600160a01b03841660009081526003602052604090205491925061103c91839150613242565b6001600160a01b038316600090815260036020526040902055600a54611063908290613242565b600a55600b546110749084906131d0565b600b55505050565b6001546001600160a01b031633146110e15760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a2063616c6c6572206973206e6f742074686520637265617460448201526137b960f11b6064820152608401610a70565b6011546111305760405162461bcd60e51b815260206004820152601760248201527f4275726e61626c653a2044697361626c6564204275726e0000000000000000006044820152606401610a70565b61113c33600083611be9565b8060095461114a9190613242565b600955600b5461115b9082906131d0565b600b556040518181527fb3871d378eeb4c3372ea4c46076e44c52a1b329359d0f7f90c7b03ee8c0792ce906020015b60405180910390a150565b6001546001600160a01b031633146111fa5760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a2063616c6c6572206973206e6f742074686520637265617460448201526137b960f11b6064820152608401610a70565b6001600160a01b03166000908152600660205260409020805460ff19166001179055565b60006009548311156112725760405162461bcd60e51b815260206004820152601f60248201527f416d6f756e74206d757374206265206c657373207468616e20737570706c79006044820152606401610a70565b816112915760006112828461221c565b509395506109bd945050505050565b600061129c8461221c565b509295506109bd945050505050565b6001546001600160a01b031633146113105760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a2063616c6c6572206973206e6f742074686520637265617460448201526137b960f11b6064820152608401610a70565b6001600160a01b03811660009081526007602052604090205460ff16156113795760405162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c7265616479206578636c7564656400000000006044820152606401610a70565b6001600160a01b038116600090815260036020526040902054156113d3576001600160a01b0381166000908152600360205260409020546113b990610b36565b6001600160a01b0382166000908152600460205260409020555b6001600160a01b03166000818152600760205260408120805460ff191660019081179091556008805491820181559091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055565b600f546000906114a35760405162461bcd60e51b815260206004820152601860248201527f5061757361626c653a2044697361626c656420506175736500000000000000006044820152606401610a70565b50600e54610100900460ff1690565b6002546001600160a01b0316331461150c5760405162461bcd60e51b815260206004820181905260248201527f4d616e6167653a63616c6c6572206973206e6f7420746865206d616e616765726044820152606401610a70565b811580159061151c575081600114155b1561153157601c805461ff0019166101001790555b81600114806115405750816002145b1561157357601c80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff16620100001790555b8160031461158957805160145560208101516018555b81600114806115985750816002145b156115a65760408101516018555b81600314806115b55750816004145b156115c35760608101516016555b5050601454601555601654601755565b6001600160a01b03811660009081526007602052604081205460ff161561161057506001600160a01b031660009081526004602052604090205490565b6001600160a01b0382166000908152600360205260409020546109bd90610b36565b6060600d805461091e90613259565b6001546001600160a01b031633146116a65760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a2063616c6c6572206973206e6f742074686520637265617460448201526137b960f11b6064820152608401610a70565b600f546116f55760405162461bcd60e51b815260206004820152601760248201527f4d696e7461626c653a2044697361626c6564204d696e740000000000000000006044820152606401610a70565b6000198160095461170691906131d0565b11156117545760405162461bcd60e51b815260206004820152600d60248201527f65786365656473206c696d6974000000000000000000000000000000000000006044820152606401610a70565b61175f333383611be9565b8060095461176d91906131d0565b600955600b5461177e9082906131d0565b600b556040518181527fdd779ccd34929e417fc56a3ffb2acea0e3ce9ff756ef2107f4a75b6b00132aeb9060200161118a565b3360009081526005602090815260408083206001600160a01b038616845290915281205482111561184a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610a70565b3360008181526005602090815260408083206001600160a01b03881684529091529020546109b991908590610aaf908690613242565b600061188d338484611be9565b6109b9338484611eb4565b6001546001600160a01b031633146118fd5760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a2063616c6c6572206973206e6f742074686520637265617460448201526137b960f11b6064820152608401610a70565b60125461194c5760405162461bcd60e51b815260206004820152601d60248201527f426c61636b6c6973743a2044697361626c656420426c61636b6c6973740000006044820152606401610a70565b6001600160a01b038216600081815260136020908152604091829020805460ff191685151590811790915591519182527f6a12b3df6cba4203bd7fd06b816789f87de8c594299aed5717ae070fac781bac910160405180910390a25050565b6012546000906119fd5760405162461bcd60e51b815260206004820152601d60248201527f426c61636b6c6973743a2044697361626c656420426c61636b6c6973740000006044820152606401610a70565b506001600160a01b03811660009081526013602052604090205460ff165b919050565b6001546001600160a01b03163314611a855760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a2063616c6c6572206973206e6f742074686520637265617460448201526137b960f11b6064820152608401610a70565b6001600160a01b03166000908152600660205260409020805460ff19169055565b6001546001600160a01b03163314611b0b5760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a2063616c6c6572206973206e6f742074686520637265617460448201526137b960f11b6064820152608401610a70565b600f54611b5a5760405162461bcd60e51b815260206004820152601860248201527f5061757361626c653a2044697361626c656420506175736500000000000000006044820152606401610a70565b611b62611451565b611bae5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610a70565b600e805461ff00191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602001610d11565b60125415611ce957611bfa836119ab565b15611c6d5760405162461bcd60e51b815260206004820152603060248201527f546f6b656e207472616e7366657220726566757365642e20526563656976657260448201527f206973206f6e20626c61636b6c697374000000000000000000000000000000006064820152608401610a70565b611c76826119ab565b15611ce95760405162461bcd60e51b815260206004820152603060248201527f546f6b656e207472616e7366657220726566757365642e20526563656976657260448201527f206973206f6e20626c61636b6c697374000000000000000000000000000000006064820152608401610a70565b60105415611d4657611cf9611451565b15611d465760405162461bcd60e51b815260206004820152601060248201527f546f6b656e206973205061757365642e000000000000000000000000000000006044820152606401610a70565b505050565b6001600160a01b038316611dc65760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610a70565b6001600160a01b038216611e425760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610a70565b600180546001600160a01b039081166000908152600560209081526040808320878516808552925291829020859055925490519116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590611ea79085815260200190565b60405180910390a3505050565b6001600160a01b038316611f305760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610a70565b6001600160a01b038216611fac5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610a70565b600081116120225760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d75737420626520677265617465722060448201527f7468616e207a65726f00000000000000000000000000000000000000000000006064820152608401610a70565b6001546001600160a01b0384811691161480159061204e57506001546001600160a01b03838116911614155b156120cb576019548111156120cb5760405162461bcd60e51b815260206004820152602860248201527f5472616e7366657220616d6f756e74206578636565647320746865206d61785460448201527f78416d6f756e742e0000000000000000000000000000000000000000000000006064820152608401610a70565b60006120d6306115d3565b601a54601c549192508210159060ff161580156120fa5750601c54610100900460ff165b801561213757507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b1561219a57801561215057601a5491506121508261226b565b601c54479062010000900460ff1680156121715750670de0b6b3a764000081115b1561219857601b548111156121855750601b545b6121986121936064836131e8565b6122d2565b505b6001600160a01b03851660009081526006602052604090205460019060ff16806121dc57506001600160a01b03851660009081526006602052604090205460ff165b156121e5575060005b6121f1868686846122fb565b505050505050565b6000806000612206612426565b909250905061221581836131e8565b9250505090565b60008060008060008060008060006122338a6125a9565b92509250925060008060006122518d868661224c6121f9565b6125ec565b919f909e50909c50959a5093985091965092945050505050565b601c805460ff191660011790554761228282612643565b600061228e8247613242565b6000546018546016549293506122c3926001600160a01b03909216916122b490856131e8565b6122be9190613223565b612864565b5050601c805460ff1916905550565b601c805460ff1916600117905580156122ee576122ee8161289a565b50601c805460ff19169055565b8061230857612308612a83565b6001600160a01b03841660009081526007602052604090205460ff16801561234957506001600160a01b03831660009081526007602052604090205460ff16155b1561235e57612359848484612ab1565b61240a565b6001600160a01b03841660009081526007602052604090205460ff1615801561239f57506001600160a01b03831660009081526007602052604090205460ff165b156123af57612359848484612bda565b6001600160a01b03841660009081526007602052604090205460ff1680156123ef57506001600160a01b03831660009081526007602052604090205460ff165b156123ff57612359848484612c86565b61240a848484612cfb565b8061242057612420601554601455601754601655565b50505050565b600a546009546000918291825b6008548110156125785782600360006008848154811061245557612455613326565b60009182526020808320909101546001600160a01b0316835282019290925260400190205411806124c0575081600460006008848154811061249957612499613326565b60009182526020808320909101546001600160a01b03168352820192909252604001902054115b156124d657600a54600954945094505050509091565b60036000600883815481106124ed576124ed613326565b60009182526020808320909101546001600160a01b0316835282019290925260400190205461251c9084613242565b9250600460006008838154811061253557612535613326565b60009182526020808320909101546001600160a01b031683528201929092526040019020546125649083613242565b915080612570816132ad565b915050612433565b50600954600a5461258991906131e8565b8210156125a057600a546009549350935050509091565b90939092509050565b6000806000806125b885612d40565b905060006125c586612d5c565b90506000816125d48489613242565b6125de9190613242565b979296509094509092505050565b60008080806125fb8589613223565b905060006126098689613223565b905060006126178789613223565b90506000816126268486613242565b6126309190613242565b939b939a50919850919650505050505050565b604080516002808252606082018352600092602083019080368337019050509050308160008151811061267857612678613326565b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156126f157600080fd5b505afa158015612705573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127299190612e4b565b8160018151811061273c5761273c613326565b60200260200101906001600160a01b031690816001600160a01b031681525050612787307f000000000000000000000000000000000000000000000000000000000000000084611d4b565b6040517f791ac9470000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063791ac947906127f5908590600090869030904290600401613144565b600060405180830381600087803b15801561280f57600080fd5b505af1158015612823573d6000803e3d6000fd5b505050507f32cde87eb454f3a0b875ab23547023107cfad454363ec88ba5695e2c24aa52a78282604051612858929190613123565b60405180910390a15050565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611d46573d6000803e3d6000fd5b6040805160028082526060820183526000926020830190803683370190505090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561291457600080fd5b505afa158015612928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294c9190612e4b565b8160008151811061295f5761295f613326565b60200260200101906001600160a01b031690816001600160a01b031681525050308160018151811061299357612993613326565b6001600160a01b0392831660209182029290920101527f00000000000000000000000000000000000000000000000000000000000000001663b6f9de95836000847f0000000000000000000000000000000000000000000000000000000000000000612a014261012c6131d0565b6040518663ffffffff1660e01b8152600401612a20949392919061307b565b6000604051808303818588803b158015612a3957600080fd5b505af1158015612a4d573d6000803e3d6000fd5b50505050507f6fd378a9d8b7345c2e5b18229aaf1e39d32b177b501d0a0d26a0a858a23a96248282604051612858929190613123565b601454158015612a935750601654155b15612a9a57565b601480546015556016805460175560009182905555565b600080600080600080612ac38761221c565b6001600160a01b038f16600090815260046020526040902054959b50939950919750955093509150612af6908890613242565b6001600160a01b038a16600090815260046020908152604080832093909355600390522054612b26908790613242565b6001600160a01b03808b1660009081526003602052604080822093909355908a1681522054612b569086906131d0565b6001600160a01b038916600090815260036020526040902055612b7881612d6e565b612b828483612df8565b876001600160a01b0316896001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef85604051612bc791815260200190565b60405180910390a3505050505050505050565b600080600080600080612bec8761221c565b6001600160a01b038f16600090815260036020526040902054959b50939950919750955093509150612c1f908790613242565b6001600160a01b03808b16600090815260036020908152604080832094909455918b16815260049091522054612c569084906131d0565b6001600160a01b038916600090815260046020908152604080832093909355600390522054612b569086906131d0565b600080600080600080612c988761221c565b6001600160a01b038f16600090815260046020526040902054959b50939950919750955093509150612ccb908890613242565b6001600160a01b038a16600090815260046020908152604080832093909355600390522054612c1f908790613242565b600080600080600080612d0d8761221c565b6001600160a01b038f16600090815260036020526040902054959b50939950919750955093509150612b26908790613242565b6000606460145483612d529190613223565b6109bd91906131e8565b6000606460165483612d529190613223565b6000612d786121f9565b90506000612d868284613223565b30600090815260036020526040902054909150612da49082906131d0565b3060009081526003602090815260408083209390935560079052205460ff1615611d465730600090815260046020526040902054612de39084906131d0565b30600090815260046020526040902055505050565b81600a54612e069190613242565b600a55600b54612e179082906131d0565b600b555050565b80358015158114611a1b57600080fd5b600060208284031215612e4057600080fd5b8135610bc681613355565b600060208284031215612e5d57600080fd5b8151610bc681613355565b60008060408385031215612e7b57600080fd5b8235612e8681613355565b91506020830135612e9681613355565b809150509250929050565b600080600060608486031215612eb657600080fd5b8335612ec181613355565b92506020840135612ed181613355565b929592945050506040919091013590565b60008060408385031215612ef557600080fd5b8235612f0081613355565b9150612f0e60208401612e1e565b90509250929050565b60008060408385031215612f2a57600080fd5b8235612f3581613355565b946020939093013593505050565b600060808284031215612f5557600080fd5b612f5d613180565b823581526020830135602082015260408301356040820152606083013560608201528091505092915050565b600060208284031215612f9b57600080fd5b5035919050565b60008060a08385031215612fb557600080fd5b82359150602084603f850112612fca57600080fd5b612fd2613180565b808286018760a088011115612fe657600080fd5b60005b600481101561300657813584529284019290840190600101612fe9565b509497909650945050505050565b6000806040838503121561302757600080fd5b82359150612f0e60208401612e1e565b600081518084526020808501945080840160005b838110156130705781516001600160a01b03168752958201959082019060010161304b565b509495945050505050565b8481526080602082015260006130946080830186613037565b6001600160a01b03949094166040830152506060015292915050565b600060208083528351808285015260005b818110156130dd578581018301518582016040015282016130c1565b818111156130ef576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b82815260406020820152600061313c6040830184613037565b949350505050565b85815284602082015260a06040820152600061316360a0830186613037565b6001600160a01b0394909416606083015250608001529392505050565b6040516080810167ffffffffffffffff811182821017156131ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b600082198211156131e3576131e36132c8565b500190565b60008261321e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600081600019048311821515161561323d5761323d6132c8565b500290565b600082821015613254576132546132c8565b500390565b600181811c9082168061326d57607f821691505b602082108114156132a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60006000198214156132c1576132c16132c8565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6001600160a01b038116811461336a57600080fd5b5056fea26469706673582212201456a18eac152b130e5e53f2b633997f1a1c05757d020ffcfc43ac26083cb50764736f6c63430008070033ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122066a4c09fef59a45e05cb955adba8455796e21eadbfad30a3ce8597dbe355be6d64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}