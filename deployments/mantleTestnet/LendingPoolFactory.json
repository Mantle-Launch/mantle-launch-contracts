{
  "address": "0xF34C6E22267BC7dddE109a9758450EDA62C9d60c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeStamp",
          "type": "uint256"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPoolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8c4c351f47f0e700133f718b675aeb0780af8e5878ec00fe3aceed32351b8efb",
  "receipt": {
    "to": null,
    "from": "0x20613aBe93e4611Cf547b4395E4248c6129c8697",
    "contractAddress": "0xF34C6E22267BC7dddE109a9758450EDA62C9d60c",
    "transactionIndex": 0,
    "gasUsed": "2138438",
    "logsBloom": "0x
    "blockHash": "0xdf5d4baaf3e43970525717af48dd0431f38890f8716d501c88d904ae70492020",
    "transactionHash": "0x8c4c351f47f0e700133f718b675aeb0780af8e5878ec00fe3aceed32351b8efb",
    "logs": [],
    "blockNumber": 622678,
    "cumulativeGasUsed": "2138438",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0b75f8cea7e4D59738A924eA929a8a7E35D63450"
  ],
  "solcInputHash": "7a3ef2f4798bcaa66babe5857aeb8d7d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"feeTo()\":{\"notice\":\"The address supposed to get the protocol fee\"},\"feeToSetter()\":{\"notice\":\"address that can set the address\"},\"getPool(address)\":{\"notice\":\"mapping from Token => Pool address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Landing/LendingPoolFactory.sol\":\"LendingPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Landing/LendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n// - Create a pool contract that accepts deposit from lenders , who earn interest on lending\\r\\n// - User  or borrower can borrow some amount of tokens (limited) , and pay back with some interest for some time period.\\r\\n// - lender can withdraw the amount later with some interest\\r\\n\\r\\n// import \\\"../Other/interfaces/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\n// to maintain the track we need to mint and Burn Tokens\\r\\n// Provide allowance first by calling approve()\\r\\n\\r\\ncontract LendingPool is ERC20 {\\r\\n    /// intialize token\\r\\n    ERC20 immutable token;\\r\\n    address public immutable tokenAddress;\\r\\n    uint256 totalPoolSupply;\\r\\n\\r\\n    /// the rate earned by the lender per second\\r\\n    uint256 lendRate = 100;\\r\\n    /// the rate paid by the borrower per second\\r\\n    uint256 borrowRate = 130;\\r\\n\\r\\n    uint256 peroidBorrowed;\\r\\n\\r\\n    ///  struct with amount and date of borrowing or lending\\r\\n    struct Amount {\\r\\n        uint256 amount;\\r\\n        uint256 start;\\r\\n    }\\r\\n\\r\\n    // mapping to check if the address has lended any amount\\r\\n    mapping(address => Amount) public lendAmount;\\r\\n    // mapping for the interest earned by the lender ;\\r\\n    mapping(address => uint256) public earnedInterest;\\r\\n\\r\\n    // arrays to store the info about lender & borrowers\\r\\n    mapping(address => bool) public lenders;\\r\\n    mapping(address => bool) public borrowers;\\r\\n\\r\\n    // mapping to check if the address has borrowed any amount\\r\\n    mapping(address => Amount) public borrowAmount;\\r\\n    // mapping for the interest to be paid by the borrower ;\\r\\n    mapping(address => uint256) public payInterest;\\r\\n\\r\\n    /// events\\r\\n    event Deposit(address user, uint256 amount);\\r\\n    event Withdraw(address user, uint256 amount);\\r\\n\\r\\n    event Borrow(address user, uint256 amount);\\r\\n    event Repay(address user, uint256 amount);\\r\\n\\r\\n    /// making the contract payable and adding the tokens in starting to the pool\\r\\n\\r\\n    constructor(address _tokenAddress) ERC20(\\\"XToken\\\", \\\"XT\\\") {\\r\\n        token = ERC20(_tokenAddress);\\r\\n        tokenAddress = _tokenAddress;\\r\\n    }\\r\\n\\r\\n    function calculateRepayAmount(address user, uint256 repayAmount)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 amount)\\r\\n    {\\r\\n        /// total amount to be repaid with intrest\\r\\n        Amount storage amount_ = borrowAmount[user];\\r\\n        require(\\r\\n            repayAmount <= amount_.amount,\\r\\n            \\\"Amount exceeding borrowed amount\\\"\\r\\n        );\\r\\n        uint256 interest = (repayAmount *\\r\\n            ((block.timestamp - amount_.start) * borrowRate * 1e18)) /\\r\\n            totalPoolSupply;\\r\\n        amount = (repayAmount + interest);\\r\\n    }\\r\\n\\r\\n    function calculateWithdrawAmount(address user, uint256 withdrawAmount)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 amount)\\r\\n    {\\r\\n        Amount storage amount_ = lendAmount[user];\\r\\n        require(\\r\\n            withdrawAmount <= amount_.amount,\\r\\n            \\\"Amount exceeding deposit amount\\\"\\r\\n        );\\r\\n\\r\\n        uint256 interest = (withdrawAmount *\\r\\n            ((block.timestamp - amount_.start) * lendRate * 1e18)) /\\r\\n            totalPoolSupply;\\r\\n        amount = (withdrawAmount + interest);\\r\\n    }\\r\\n\\r\\n    function updateBorrow(address user)\\r\\n        public\\r\\n        returns (uint256 interestAmount)\\r\\n    {\\r\\n        Amount storage amount_ = borrowAmount[user];\\r\\n        interestAmount =\\r\\n            (amount_.amount *\\r\\n                ((block.timestamp - amount_.start) * borrowRate * 1e18)) /\\r\\n            totalPoolSupply;\\r\\n\\r\\n        payInterest[user] = interestAmount;\\r\\n    }\\r\\n\\r\\n    function updateLend(address user) public returns (uint256 interestAmount) {\\r\\n        Amount storage amount_ = lendAmount[user];\\r\\n        interestAmount =\\r\\n            (amount_.amount *\\r\\n                ((block.timestamp - amount_.start) * lendRate * 1e18)) /\\r\\n            totalPoolSupply;\\r\\n        earnedInterest[user] = interestAmount;\\r\\n    }\\r\\n\\r\\n    /// @dev - to lend the amount by  , add liquidity\\r\\n    /// @param _amount - deposited amount\\r\\n    function deposit(uint256 _amount, address user) external {\\r\\n        require(_amount != 0, \\\" amount can not be 0\\\");\\r\\n\\r\\n        /// transferring the tokens to the pool contract\\r\\n        token.transferFrom(user, address(this), _amount);\\r\\n\\r\\n        /// adding in lending and lenders array for record\\r\\n        lendAmount[user].amount = _amount;\\r\\n        lendAmount[user].start = block.timestamp;\\r\\n        lenders[user] = true;\\r\\n\\r\\n        _mint(user, _amount);\\r\\n\\r\\n        /// updating total supply\\r\\n        totalPoolSupply += _amount;\\r\\n        updateLend(user);\\r\\n        emit Deposit(user, _amount);\\r\\n    }\\r\\n\\r\\n    /// @dev - to borrow token\\r\\n    /// @param _amount - amount to be withdraw\\r\\n    function borrow(uint256 _amount, address user) external {\\r\\n        require(_amount != 0, \\\" amount can not be 0\\\");\\r\\n\\r\\n        /// Amount can not be sent\\r\\n        require(_amount < totalPoolSupply / 10, \\\"Amount is incorrect\\\");\\r\\n\\r\\n        /// updating records first\\r\\n        borrowAmount[user].amount = _amount;\\r\\n        borrowAmount[user].start = block.timestamp;\\r\\n        totalPoolSupply -= _amount;\\r\\n\\r\\n        /// then transfer\\r\\n        token.transfer(user, _amount);\\r\\n\\r\\n        /// tokenApproval to deduct under liquidation\\r\\n        token.approve(address(this), _amount);\\r\\n\\r\\n        borrowers[user] = true;\\r\\n        updateBorrow(user);\\r\\n        emit Borrow(user, _amount);\\r\\n    }\\r\\n\\r\\n    /// @dev  - repay the whole loan\\r\\n    function repay(address user, uint256 amount) external {\\r\\n        /// check borrower\\r\\n        require(borrowers[user], \\\"not a borrower\\\");\\r\\n\\r\\n        uint256 _amount = calculateRepayAmount(user, amount);\\r\\n        require(_amount != 0, \\\"amount can not be 0\\\");\\r\\n\\r\\n        /// transferring the tokens\\r\\n        token.transferFrom(user, address(this), _amount);\\r\\n\\r\\n        /// updating records and deleting the record of borrowing\\r\\n        borrowAmount[user].amount -= _amount;\\r\\n\\r\\n        if (borrowAmount[user].amount == 0) {\\r\\n            borrowers[user] = false;\\r\\n        }\\r\\n\\r\\n        /// update total supply at the end\\r\\n        totalPoolSupply += _amount;\\r\\n        updateBorrow(user);\\r\\n        emit Repay(user, amount);\\r\\n    }\\r\\n\\r\\n    /// @dev  - to withdraw the amount for the lender\\r\\n    function withdraw(address user, uint256 amount) external {\\r\\n        /// checking if the caller is a lender or not\\r\\n        require(lenders[user], \\\"you are not a lender\\\");\\r\\n\\r\\n        // calculating the total amount along with the interest\\r\\n        uint256 _amount = calculateWithdrawAmount(user, amount);\\r\\n        require(_amount != 0, \\\" amount can not be 0\\\");\\r\\n\\r\\n        /// deleting the records and updating the list\\r\\n        lendAmount[user].amount -= _amount;\\r\\n\\r\\n        if (lendAmount[user].amount == 0) {\\r\\n            lenders[user] = false;\\r\\n        }\\r\\n\\r\\n        _burn(user, _amount);\\r\\n\\r\\n        /// updating total supply earlier before transfering token , so as to be safe from attacks\\r\\n        totalPoolSupply -= _amount;\\r\\n\\r\\n        /// transferring the tokens in the end\\r\\n        token.transfer(user, _amount);\\r\\n        updateLend(user);\\r\\n        emit Withdraw(user, amount);\\r\\n    }\\r\\n\\r\\n    function liquidate(address user, uint256 amount) public {\\r\\n        require(borrowers[user], \\\"Not a borrower\\\");\\r\\n\\r\\n        require(amount <= borrowAmount[user].amount, \\\"Amount is incorrect\\\");\\r\\n\\r\\n        /// already approved\\r\\n        token.transferFrom(user, address(this), amount);\\r\\n\\r\\n        uint256 reward = (amount * 3) / 100;\\r\\n        updateBorrow(user);\\r\\n        token.transfer(msg.sender, reward);\\r\\n        borrowAmount[user].amount -= amount + reward;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0954bb74311a08145e080f3d27648b18fffe87c0095edfe632a412fff2457270\",\"license\":\"MIT\"},\"contracts/Landing/LendingPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./LendingPool.sol\\\";\\r\\n\\r\\ncontract LendingPoolFactory {\\r\\n    /// The address supposed to get the protocol fee\\r\\n    address public feeTo;\\r\\n\\r\\n    /// address that can set the address\\r\\n    address public feeToSetter;\\r\\n\\r\\n    ///  mapping from Token => Pool address\\r\\n    mapping(address => address) public getPool;\\r\\n    address[] public allPools;\\r\\n\\r\\n    event PoolCreated(address indexed token, address pool, uint256 timeStamp);\\r\\n\\r\\n    constructor(address _feeToSetter) {\\r\\n        feeToSetter = _feeToSetter;\\r\\n    }\\r\\n\\r\\n    function allPoolsLength() external view returns (uint256) {\\r\\n        return allPools.length;\\r\\n    }\\r\\n\\r\\n    function createPool(address token) external returns (address) {\\r\\n        require(token != address(0), \\\"ZERO_ADDRESS\\\");\\r\\n        require(getPool[token] == address(0), \\\"POOL_EXISTS\\\");\\r\\n\\r\\n        LendingPool _pool = new LendingPool(token);\\r\\n\\r\\n        getPool[token] = address(_pool);\\r\\n        allPools.push(address(_pool));\\r\\n        emit PoolCreated(token, address(_pool), block.timestamp);\\r\\n        return address(_pool);\\r\\n    }\\r\\n\\r\\n    function setFeeTo(address _feeTo) external {\\r\\n        require(msg.sender == feeToSetter, \\\"FORBIDDEN\\\");\\r\\n        feeTo = _feeTo;\\r\\n    }\\r\\n\\r\\n    function setFeeToSetter(address _feeToSetter) external {\\r\\n        require(msg.sender == feeToSetter, \\\"FORBIDDEN\\\");\\r\\n        feeToSetter = _feeToSetter;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6da28c02b9045c93970f7d3b0a2e737368542268a232c7dd98df9c886dd2389e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161261938038061261983398101604081905261002f91610054565b600180546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b612586806100936000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a2e74af61161005b578063a2e74af61461011d578063bbe4f6db14610132578063efde4e6414610168578063f46901ed1461017957600080fd5b8063017e7e581461008d578063094b7415146100d757806341d1de97146100f75780639049f9d21461010a575b600080fd5b6000546100ad9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6001546100ad9073ffffffffffffffffffffffffffffffffffffffff1681565b6100ad61010536600461058c565b61018c565b6100ad6101183660046105a5565b6101c3565b61013061012b3660046105a5565b6103ef565b005b6100ad6101403660046105a5565b60026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6003546040519081526020016100ce565b6101306101873660046105a5565b6104b7565b6003818154811061019c57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b600073ffffffffffffffffffffffffffffffffffffffff8216610247576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f41444452455353000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82811660009081526002602052604090205416156102d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f504f4f4c5f455849535453000000000000000000000000000000000000000000604482015260640161023e565b6000826040516102e59061057f565b73ffffffffffffffffffffffffffffffffffffffff9091168152602001604051809103906000f08015801561031e573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff848116600081815260026020908152604080832080549587167fffffffffffffffffffffffff000000000000000000000000000000000000000096871681179091556003805460018101825594527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9093018054909516831790945583519182524290820152929350917ff8a0462f666b427ea753848be7e91f9ce413975906f6f39950be296ca9a4d524910160405180910390a292915050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610470576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015260640161023e565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff163314610538576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015260640161023e565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b611f6e806105e383390190565b60006020828403121561059e57600080fd5b5035919050565b6000602082840312156105b757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146105db57600080fd5b939250505056fe60c0604052606460065560826007553480156200001b57600080fd5b5060405162001f6e38038062001f6e8339810160408190526200003e916200015c565b60408051808201825260068152652c2a37b5b2b760d11b602080830191825283518085019094526002845261161560f21b9084015281519192916200008691600391620000b6565b5080516200009c906004906020840190620000b6565b5050506001600160a01b0316608081905260a052620001ca565b828054620000c4906200018e565b90600052602060002090601f016020900481019282620000e8576000855562000133565b82601f106200010357805160ff191683800117855562000133565b8280016001018555821562000133579182015b828111156200013357825182559160200191906001019062000116565b506200014192915062000145565b5090565b5b8082111562000141576000815560010162000146565b6000602082840312156200016f57600080fd5b81516001600160a01b03811681146200018757600080fd5b9392505050565b600181811c90821680620001a357607f821691505b602082108103620001c457634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a051611d546200021a600039600061038301526000818161066501528181610a7a01528181610b1d01528181610c9c0152818161100a015281816110d201526113990152611d546000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80636e553f65116100f9578063aa1970df11610097578063d007c64411610071578063d007c6441461042c578063d619f5171461044c578063dd62ed3e1461045f578063f3fef3a31461049857600080fd5b8063aa1970df146103e3578063bcbaf487146103f6578063bf5d50c41461040957600080fd5b806395d89b41116100d357806395d89b41146103765780639d76ea581461037e578063a457c2d7146103bd578063a9059cbb146103d057600080fd5b80636e553f651461031357806370a08231146103265780638d113a7f1461034f57600080fd5b806328fd10d711610166578063395093511161014057806339509351146102ba5780634722a531146102cd5780634b3fd148146102e05780635d948c35146102f357600080fd5b806328fd10d7146102755780632ac2382114610298578063313ce567146102ab57600080fd5b80631c78da26116101975780631c78da261461021157806322867d781461024d57806323b872dd1461026257600080fd5b806306fdde03146101be578063095ea7b3146101dc57806318160ddd146101ff575b600080fd5b6101c66104ab565b6040516101d39190611a66565b60405180910390f35b6101ef6101ea366004611af5565b61053d565b60405190151581526020016101d3565b6002545b6040519081526020016101d3565b61023861021f366004611b1f565b6009602052600090815260409020805460019091015482565b604080519283526020830191909152016101d3565b61026061025b366004611af5565b610555565b005b6101ef610270366004611b41565b6107aa565b6101ef610283366004611b1f565b600b6020526000908152604090205460ff1681565b6102036102a6366004611b1f565b6107ce565b604051601281526020016101d3565b6101ef6102c8366004611af5565b610850565b6102036102db366004611af5565b61088f565b6102606102ee366004611b7d565b610955565b610203610301366004611b1f565b600a6020526000908152604090205481565b610260610321366004611b7d565b610c07565b610203610334366004611b1f565b6001600160a01b031660009081526020819052604090205490565b61023861035d366004611b1f565b600d602052600090815260409020805460019091015482565b6101c6610dad565b6103a57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101d3565b6101ef6103cb366004611af5565b610dbc565b6101ef6103de366004611af5565b610e66565b6102036103f1366004611af5565b610e74565b610260610404366004611af5565b610ef5565b6101ef610417366004611b1f565b600c6020526000908152604090205460ff1681565b61020361043a366004611b1f565b600e6020526000908152604090205481565b61020361045a366004611b1f565b611184565b61020361046d366004611ba9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102606104a6366004611af5565b611206565b6060600380546104ba90611bd3565b80601f01602080910402602001604051908101604052809291908181526020018280546104e690611bd3565b80156105335780601f1061050857610100808354040283529160200191610533565b820191906000526020600020905b81548152906001019060200180831161051657829003601f168201915b5050505050905090565b60003361054b818585611450565b5060019392505050565b6001600160a01b0382166000908152600c602052604090205460ff166105c25760405162461bcd60e51b815260206004820152600e60248201527f6e6f74206120626f72726f77657200000000000000000000000000000000000060448201526064015b60405180910390fd5b60006105ce8383610e74565b9050806000036106205760405162461bcd60e51b815260206004820152601360248201527f616d6f756e742063616e206e6f7420626520300000000000000000000000000060448201526064016105b9565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152306024830152604482018390527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016020604051808303816000875af11580156106ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d29190611c26565b506001600160a01b0383166000908152600d6020526040812080548392906106fb908490611c77565b90915550506001600160a01b0383166000908152600d60205260408120549003610740576001600160a01b0383166000908152600c60205260409020805460ff191690555b80600560008282546107529190611c8e565b90915550610761905083611184565b50604080516001600160a01b0385168152602081018490527f5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a59423191015b60405180910390a1505050565b6000336107b88582856115a9565b6107c3858585611659565b506001949350505050565b6001600160a01b038116600090815260096020526040812060055460065460018301546107fb9042611c77565b6108059190611ca6565b61081790670de0b6b3a7640000611ca6565b82546108239190611ca6565b61082d9190611ce3565b6001600160a01b039093166000908152600a602052604090208390555090919050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061054b908290869061088a908790611c8e565b611450565b6001600160a01b038216600090815260096020526040812080548311156108f85760405162461bcd60e51b815260206004820152601f60248201527f416d6f756e7420657863656564696e67206465706f73697420616d6f756e740060448201526064016105b9565b60006005546006548360010154426109109190611c77565b61091a9190611ca6565b61092c90670de0b6b3a7640000611ca6565b6109369086611ca6565b6109409190611ce3565b905061094c8185611c8e565b95945050505050565b816000036109a55760405162461bcd60e51b815260206004820152601460248201527f20616d6f756e742063616e206e6f74206265203000000000000000000000000060448201526064016105b9565b600a6005546109b49190611ce3565b8210610a025760405162461bcd60e51b815260206004820152601360248201527f416d6f756e7420697320696e636f72726563740000000000000000000000000060448201526064016105b9565b6001600160a01b0381166000908152600d602052604081208381554260019091015560058054849290610a36908490611c77565b90915550506040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610ac3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae79190611c26565b506040517f095ea7b3000000000000000000000000000000000000000000000000000000008152306004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063095ea7b3906044016020604051808303816000875af1158015610b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b929190611c26565b506001600160a01b0381166000908152600c60205260409020805460ff19166001179055610bbf81611184565b50604080516001600160a01b0383168152602081018490527fcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a3675091015b60405180910390a15050565b81600003610c575760405162461bcd60e51b815260206004820152601460248201527f20616d6f756e742063616e206e6f74206265203000000000000000000000000060448201526064016105b9565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152306024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016020604051808303816000875af1158015610ce5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d099190611c26565b506001600160a01b038116600090815260096020908152604080832085815542600191820155600b909252909120805460ff19169091179055610d4c8183611846565b8160056000828254610d5e9190611c8e565b90915550610d6d9050816107ce565b50604080516001600160a01b0383168152602081018490527fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9101610bfb565b6060600480546104ba90611bd3565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919083811015610e595760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016105b9565b6107c38286868403611450565b60003361054b818585611659565b6001600160a01b0382166000908152600d602052604081208054831115610edd5760405162461bcd60e51b815260206004820181905260248201527f416d6f756e7420657863656564696e6720626f72726f77656420616d6f756e7460448201526064016105b9565b60006005546007548360010154426109109190611c77565b6001600160a01b0382166000908152600c602052604090205460ff16610f5d5760405162461bcd60e51b815260206004820152600e60248201527f4e6f74206120626f72726f77657200000000000000000000000000000000000060448201526064016105b9565b6001600160a01b0382166000908152600d6020526040902054811115610fc55760405162461bcd60e51b815260206004820152601360248201527f416d6f756e7420697320696e636f72726563740000000000000000000000000060448201526064016105b9565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152306024830152604482018390527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016020604051808303816000875af1158015611053573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110779190611c26565b5060006064611087836003611ca6565b6110919190611ce3565b905061109c83611184565b506040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015611123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111479190611c26565b506111528183611c8e565b6001600160a01b0384166000908152600d60205260408120805490919061117a908490611c77565b9091555050505050565b6001600160a01b0381166000908152600d6020526040812060055460075460018301546111b19042611c77565b6111bb9190611ca6565b6111cd90670de0b6b3a7640000611ca6565b82546111d99190611ca6565b6111e39190611ce3565b6001600160a01b039093166000908152600e602052604090208390555090919050565b6001600160a01b0382166000908152600b602052604090205460ff1661126e5760405162461bcd60e51b815260206004820152601460248201527f796f7520617265206e6f742061206c656e64657200000000000000000000000060448201526064016105b9565b600061127a838361088f565b9050806000036112cc5760405162461bcd60e51b815260206004820152601460248201527f20616d6f756e742063616e206e6f74206265203000000000000000000000000060448201526064016105b9565b6001600160a01b038316600090815260096020526040812080548392906112f4908490611c77565b90915550506001600160a01b0383166000908152600960205260408120549003611339576001600160a01b0383166000908152600b60205260409020805460ff191690555b6113438382611905565b80600560008282546113559190611c77565b90915550506040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156113e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114069190611c26565b50611410836107ce565b50604080516001600160a01b0385168152602081018490527f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364910161079d565b6001600160a01b0383166114cb5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016105b9565b6001600160a01b0382166115475760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016105b9565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461165357818110156116465760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016105b9565b6116538484848403611450565b50505050565b6001600160a01b0383166116d55760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016105b9565b6001600160a01b0382166117515760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016105b9565b6001600160a01b038316600090815260208190526040902054818110156117e05760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016105b9565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3611653565b6001600160a01b03821661189c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016105b9565b80600260008282546118ae9190611c8e565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b0382166119815760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016105b9565b6001600160a01b03821660009081526020819052604090205481811015611a105760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016105b9565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910161159c565b600060208083528351808285015260005b81811015611a9357858101830151858201604001528201611a77565b81811115611aa5576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b80356001600160a01b0381168114611af057600080fd5b919050565b60008060408385031215611b0857600080fd5b611b1183611ad9565b946020939093013593505050565b600060208284031215611b3157600080fd5b611b3a82611ad9565b9392505050565b600080600060608486031215611b5657600080fd5b611b5f84611ad9565b9250611b6d60208501611ad9565b9150604084013590509250925092565b60008060408385031215611b9057600080fd5b82359150611ba060208401611ad9565b90509250929050565b60008060408385031215611bbc57600080fd5b611bc583611ad9565b9150611ba060208401611ad9565b600181811c90821680611be757607f821691505b602082108103611c20577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600060208284031215611c3857600080fd5b81518015158114611b3a57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015611c8957611c89611c48565b500390565b60008219821115611ca157611ca1611c48565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611cde57611cde611c48565b500290565b600082611d19577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea2646970667358221220af6d88d17c0f4e80cd962bdb816452424626e0c15c6d123460fe4df7812b91c664736f6c634300080d0033a26469706673582212200ac94bb6cfd27a0d867387462a1462fcabc21f2441521f3492ca043115fc822e64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063a2e74af61161005b578063a2e74af61461011d578063bbe4f6db14610132578063efde4e6414610168578063f46901ed1461017957600080fd5b8063017e7e581461008d578063094b7415146100d757806341d1de97146100f75780639049f9d21461010a575b600080fd5b6000546100ad9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6001546100ad9073ffffffffffffffffffffffffffffffffffffffff1681565b6100ad61010536600461058c565b61018c565b6100ad6101183660046105a5565b6101c3565b61013061012b3660046105a5565b6103ef565b005b6100ad6101403660046105a5565b60026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6003546040519081526020016100ce565b6101306101873660046105a5565b6104b7565b6003818154811061019c57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b600073ffffffffffffffffffffffffffffffffffffffff8216610247576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f41444452455353000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82811660009081526002602052604090205416156102d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f504f4f4c5f455849535453000000000000000000000000000000000000000000604482015260640161023e565b6000826040516102e59061057f565b73ffffffffffffffffffffffffffffffffffffffff9091168152602001604051809103906000f08015801561031e573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff848116600081815260026020908152604080832080549587167fffffffffffffffffffffffff000000000000000000000000000000000000000096871681179091556003805460018101825594527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9093018054909516831790945583519182524290820152929350917ff8a0462f666b427ea753848be7e91f9ce413975906f6f39950be296ca9a4d524910160405180910390a292915050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610470576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015260640161023e565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff163314610538576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015260640161023e565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b611f6e806105e383390190565b60006020828403121561059e57600080fd5b5035919050565b6000602082840312156105b757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146105db57600080fd5b939250505056fe60c0604052606460065560826007553480156200001b57600080fd5b5060405162001f6e38038062001f6e8339810160408190526200003e916200015c565b60408051808201825260068152652c2a37b5b2b760d11b602080830191825283518085019094526002845261161560f21b9084015281519192916200008691600391620000b6565b5080516200009c906004906020840190620000b6565b5050506001600160a01b0316608081905260a052620001ca565b828054620000c4906200018e565b90600052602060002090601f016020900481019282620000e8576000855562000133565b82601f106200010357805160ff191683800117855562000133565b8280016001018555821562000133579182015b828111156200013357825182559160200191906001019062000116565b506200014192915062000145565b5090565b5b8082111562000141576000815560010162000146565b6000602082840312156200016f57600080fd5b81516001600160a01b03811681146200018757600080fd5b9392505050565b600181811c90821680620001a357607f821691505b602082108103620001c457634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a051611d546200021a600039600061038301526000818161066501528181610a7a01528181610b1d01528181610c9c0152818161100a015281816110d201526113990152611d546000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80636e553f65116100f9578063aa1970df11610097578063d007c64411610071578063d007c6441461042c578063d619f5171461044c578063dd62ed3e1461045f578063f3fef3a31461049857600080fd5b8063aa1970df146103e3578063bcbaf487146103f6578063bf5d50c41461040957600080fd5b806395d89b41116100d357806395d89b41146103765780639d76ea581461037e578063a457c2d7146103bd578063a9059cbb146103d057600080fd5b80636e553f651461031357806370a08231146103265780638d113a7f1461034f57600080fd5b806328fd10d711610166578063395093511161014057806339509351146102ba5780634722a531146102cd5780634b3fd148146102e05780635d948c35146102f357600080fd5b806328fd10d7146102755780632ac2382114610298578063313ce567146102ab57600080fd5b80631c78da26116101975780631c78da261461021157806322867d781461024d57806323b872dd1461026257600080fd5b806306fdde03146101be578063095ea7b3146101dc57806318160ddd146101ff575b600080fd5b6101c66104ab565b6040516101d39190611a66565b60405180910390f35b6101ef6101ea366004611af5565b61053d565b60405190151581526020016101d3565b6002545b6040519081526020016101d3565b61023861021f366004611b1f565b6009602052600090815260409020805460019091015482565b604080519283526020830191909152016101d3565b61026061025b366004611af5565b610555565b005b6101ef610270366004611b41565b6107aa565b6101ef610283366004611b1f565b600b6020526000908152604090205460ff1681565b6102036102a6366004611b1f565b6107ce565b604051601281526020016101d3565b6101ef6102c8366004611af5565b610850565b6102036102db366004611af5565b61088f565b6102606102ee366004611b7d565b610955565b610203610301366004611b1f565b600a6020526000908152604090205481565b610260610321366004611b7d565b610c07565b610203610334366004611b1f565b6001600160a01b031660009081526020819052604090205490565b61023861035d366004611b1f565b600d602052600090815260409020805460019091015482565b6101c6610dad565b6103a57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101d3565b6101ef6103cb366004611af5565b610dbc565b6101ef6103de366004611af5565b610e66565b6102036103f1366004611af5565b610e74565b610260610404366004611af5565b610ef5565b6101ef610417366004611b1f565b600c6020526000908152604090205460ff1681565b61020361043a366004611b1f565b600e6020526000908152604090205481565b61020361045a366004611b1f565b611184565b61020361046d366004611ba9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102606104a6366004611af5565b611206565b6060600380546104ba90611bd3565b80601f01602080910402602001604051908101604052809291908181526020018280546104e690611bd3565b80156105335780601f1061050857610100808354040283529160200191610533565b820191906000526020600020905b81548152906001019060200180831161051657829003601f168201915b5050505050905090565b60003361054b818585611450565b5060019392505050565b6001600160a01b0382166000908152600c602052604090205460ff166105c25760405162461bcd60e51b815260206004820152600e60248201527f6e6f74206120626f72726f77657200000000000000000000000000000000000060448201526064015b60405180910390fd5b60006105ce8383610e74565b9050806000036106205760405162461bcd60e51b815260206004820152601360248201527f616d6f756e742063616e206e6f7420626520300000000000000000000000000060448201526064016105b9565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152306024830152604482018390527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016020604051808303816000875af11580156106ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d29190611c26565b506001600160a01b0383166000908152600d6020526040812080548392906106fb908490611c77565b90915550506001600160a01b0383166000908152600d60205260408120549003610740576001600160a01b0383166000908152600c60205260409020805460ff191690555b80600560008282546107529190611c8e565b90915550610761905083611184565b50604080516001600160a01b0385168152602081018490527f5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a59423191015b60405180910390a1505050565b6000336107b88582856115a9565b6107c3858585611659565b506001949350505050565b6001600160a01b038116600090815260096020526040812060055460065460018301546107fb9042611c77565b6108059190611ca6565b61081790670de0b6b3a7640000611ca6565b82546108239190611ca6565b61082d9190611ce3565b6001600160a01b039093166000908152600a602052604090208390555090919050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061054b908290869061088a908790611c8e565b611450565b6001600160a01b038216600090815260096020526040812080548311156108f85760405162461bcd60e51b815260206004820152601f60248201527f416d6f756e7420657863656564696e67206465706f73697420616d6f756e740060448201526064016105b9565b60006005546006548360010154426109109190611c77565b61091a9190611ca6565b61092c90670de0b6b3a7640000611ca6565b6109369086611ca6565b6109409190611ce3565b905061094c8185611c8e565b95945050505050565b816000036109a55760405162461bcd60e51b815260206004820152601460248201527f20616d6f756e742063616e206e6f74206265203000000000000000000000000060448201526064016105b9565b600a6005546109b49190611ce3565b8210610a025760405162461bcd60e51b815260206004820152601360248201527f416d6f756e7420697320696e636f72726563740000000000000000000000000060448201526064016105b9565b6001600160a01b0381166000908152600d602052604081208381554260019091015560058054849290610a36908490611c77565b90915550506040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610ac3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae79190611c26565b506040517f095ea7b3000000000000000000000000000000000000000000000000000000008152306004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063095ea7b3906044016020604051808303816000875af1158015610b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b929190611c26565b506001600160a01b0381166000908152600c60205260409020805460ff19166001179055610bbf81611184565b50604080516001600160a01b0383168152602081018490527fcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a3675091015b60405180910390a15050565b81600003610c575760405162461bcd60e51b815260206004820152601460248201527f20616d6f756e742063616e206e6f74206265203000000000000000000000000060448201526064016105b9565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152306024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016020604051808303816000875af1158015610ce5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d099190611c26565b506001600160a01b038116600090815260096020908152604080832085815542600191820155600b909252909120805460ff19169091179055610d4c8183611846565b8160056000828254610d5e9190611c8e565b90915550610d6d9050816107ce565b50604080516001600160a01b0383168152602081018490527fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9101610bfb565b6060600480546104ba90611bd3565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919083811015610e595760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016105b9565b6107c38286868403611450565b60003361054b818585611659565b6001600160a01b0382166000908152600d602052604081208054831115610edd5760405162461bcd60e51b815260206004820181905260248201527f416d6f756e7420657863656564696e6720626f72726f77656420616d6f756e7460448201526064016105b9565b60006005546007548360010154426109109190611c77565b6001600160a01b0382166000908152600c602052604090205460ff16610f5d5760405162461bcd60e51b815260206004820152600e60248201527f4e6f74206120626f72726f77657200000000000000000000000000000000000060448201526064016105b9565b6001600160a01b0382166000908152600d6020526040902054811115610fc55760405162461bcd60e51b815260206004820152601360248201527f416d6f756e7420697320696e636f72726563740000000000000000000000000060448201526064016105b9565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152306024830152604482018390527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016020604051808303816000875af1158015611053573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110779190611c26565b5060006064611087836003611ca6565b6110919190611ce3565b905061109c83611184565b506040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015611123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111479190611c26565b506111528183611c8e565b6001600160a01b0384166000908152600d60205260408120805490919061117a908490611c77565b9091555050505050565b6001600160a01b0381166000908152600d6020526040812060055460075460018301546111b19042611c77565b6111bb9190611ca6565b6111cd90670de0b6b3a7640000611ca6565b82546111d99190611ca6565b6111e39190611ce3565b6001600160a01b039093166000908152600e602052604090208390555090919050565b6001600160a01b0382166000908152600b602052604090205460ff1661126e5760405162461bcd60e51b815260206004820152601460248201527f796f7520617265206e6f742061206c656e64657200000000000000000000000060448201526064016105b9565b600061127a838361088f565b9050806000036112cc5760405162461bcd60e51b815260206004820152601460248201527f20616d6f756e742063616e206e6f74206265203000000000000000000000000060448201526064016105b9565b6001600160a01b038316600090815260096020526040812080548392906112f4908490611c77565b90915550506001600160a01b0383166000908152600960205260408120549003611339576001600160a01b0383166000908152600b60205260409020805460ff191690555b6113438382611905565b80600560008282546113559190611c77565b90915550506040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156113e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114069190611c26565b50611410836107ce565b50604080516001600160a01b0385168152602081018490527f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364910161079d565b6001600160a01b0383166114cb5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016105b9565b6001600160a01b0382166115475760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016105b9565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461165357818110156116465760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016105b9565b6116538484848403611450565b50505050565b6001600160a01b0383166116d55760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016105b9565b6001600160a01b0382166117515760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016105b9565b6001600160a01b038316600090815260208190526040902054818110156117e05760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016105b9565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3611653565b6001600160a01b03821661189c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016105b9565b80600260008282546118ae9190611c8e565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b0382166119815760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016105b9565b6001600160a01b03821660009081526020819052604090205481811015611a105760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016105b9565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910161159c565b600060208083528351808285015260005b81811015611a9357858101830151858201604001528201611a77565b81811115611aa5576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b80356001600160a01b0381168114611af057600080fd5b919050565b60008060408385031215611b0857600080fd5b611b1183611ad9565b946020939093013593505050565b600060208284031215611b3157600080fd5b611b3a82611ad9565b9392505050565b600080600060608486031215611b5657600080fd5b611b5f84611ad9565b9250611b6d60208501611ad9565b9150604084013590509250925092565b60008060408385031215611b9057600080fd5b82359150611ba060208401611ad9565b90509250929050565b60008060408385031215611bbc57600080fd5b611bc583611ad9565b9150611ba060208401611ad9565b600181811c90821680611be757607f821691505b602082108103611c20577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600060208284031215611c3857600080fd5b81518015158114611b3a57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015611c8957611c89611c48565b500390565b60008219821115611ca157611ca1611c48565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611cde57611cde611c48565b500290565b600082611d19577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea2646970667358221220af6d88d17c0f4e80cd962bdb816452424626e0c15c6d123460fe4df7812b91c664736f6c634300080d0033a26469706673582212200ac94bb6cfd27a0d867387462a1462fcabc21f2441521f3492ca043115fc822e64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "feeTo()": {
        "notice": "The address supposed to get the protocol fee"
      },
      "feeToSetter()": {
        "notice": "address that can set the address"
      },
      "getPool(address)": {
        "notice": "mapping from Token => Pool address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8071,
        "contract": "contracts/Landing/LendingPoolFactory.sol:LendingPoolFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8074,
        "contract": "contracts/Landing/LendingPoolFactory.sol:LendingPoolFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8079,
        "contract": "contracts/Landing/LendingPoolFactory.sol:LendingPoolFactory",
        "label": "getPool",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 8082,
        "contract": "contracts/Landing/LendingPoolFactory.sol:LendingPoolFactory",
        "label": "allPools",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}