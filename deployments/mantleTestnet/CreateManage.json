{
  "address": "0xa25E5394Bc021C91F49ebb5AC7dA8faED25a78eD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "router_Addr",
          "type": "address"
        },
        {
          "internalType": "contract StandardTokenFactory",
          "name": "_standardTokenFactory",
          "type": "address"
        },
        {
          "internalType": "contract LiquidityTokenFactory",
          "name": "_liquidityTokenFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "CreateStandardSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "InitFeeSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "OwnerWithdrawSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "createLiquditySuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "setOwnerSucess",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reciever",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimal_",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "settingflag",
          "type": "uint256"
        },
        {
          "internalType": "uint256[4]",
          "name": "fees",
          "type": "uint256[4]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "mintflag",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pauseflag",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "burnflag",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blacklistflag",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.status",
          "name": "_state",
          "type": "tuple"
        }
      ],
      "name": "createLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals_",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "tokenSupply_",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "mintflag",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pauseflag",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "burnflag",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blacklistflag",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.status",
          "name": "_state",
          "type": "tuple"
        }
      ],
      "name": "createStandard",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "normal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "burn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pause",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blacklist",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deflation",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creater",
          "type": "address"
        }
      ],
      "name": "getCreatedToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "normal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "burn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pause",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blacklist",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deflation",
              "type": "uint256"
            }
          ],
          "internalType": "struct CreateManage.feeInfo",
          "name": "_fee",
          "type": "tuple"
        }
      ],
      "name": "initFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownerWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newowner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe68759bc26edf0b6caaebb94b46350713657fbc297a907033bef2e11318683f7",
  "receipt": {
    "to": null,
    "from": "0x20613aBe93e4611Cf547b4395E4248c6129c8697",
    "contractAddress": "0xa25E5394Bc021C91F49ebb5AC7dA8faED25a78eD",
    "transactionIndex": 0,
    "gasUsed": "1203580",
    "logsBloom": "0x
    "blockHash": "0xbe0a91b284b778af751eb3dbf20a5c6f172fc8c41a81cd43d6daf54e23ab4706",
    "transactionHash": "0xe68759bc26edf0b6caaebb94b46350713657fbc297a907033bef2e11318683f7",
    "logs": [],
    "blockNumber": 608419,
    "cumulativeGasUsed": "1203580",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x20613aBe93e4611Cf547b4395E4248c6129c8697",
    "0x4df04E20cCd9a8B82634754fcB041e86c5FF085A",
    "0x521757C0C82004f04Aa504e8bbEe6a34436cfea4",
    "0x80C5B26AAbd6549D01DB391281987E2c438C2540"
  ],
  "solcInputHash": "0b2f36874526c3ea18fd5f6c69eec79a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router_Addr\",\"type\":\"address\"},{\"internalType\":\"contract StandardTokenFactory\",\"name\":\"_standardTokenFactory\",\"type\":\"address\"},{\"internalType\":\"contract LiquidityTokenFactory\",\"name\":\"_liquidityTokenFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"CreateStandardSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InitFeeSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OwnerWithdrawSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"createLiquditySuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setOwnerSucess\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reciever\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimal_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settingflag\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"fees\",\"type\":\"uint256[4]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mintflag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pauseflag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnflag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blacklistflag\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.status\",\"name\":\"_state\",\"type\":\"tuple\"}],\"name\":\"createLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenSupply_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mintflag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pauseflag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnflag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blacklistflag\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.status\",\"name\":\"_state\",\"type\":\"tuple\"}],\"name\":\"createStandard\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"normal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pause\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blacklist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deflation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creater\",\"type\":\"address\"}],\"name\":\"getCreatedToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"normal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pause\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blacklist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deflation\",\"type\":\"uint256\"}],\"internalType\":\"struct CreateManage.feeInfo\",\"name\":\"_fee\",\"type\":\"tuple\"}],\"name\":\"initFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CreateToken/Meter/CreateVerify.sol\":\"CreateManage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/CreateToken/Meter/CreateVerify.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"./SharedStructs.sol\\\";\\r\\nimport \\\"./StandardToken.sol\\\";\\r\\nimport \\\"./LiquidityToken.sol\\\";\\r\\nimport \\\"./StandardTokenFactory.sol\\\";\\r\\nimport \\\"./LiquidityTokenFactory.sol\\\";\\r\\n\\r\\ncontract CreateManage {\\r\\n    struct feeInfo {\\r\\n        uint256 normal;\\r\\n        uint256 mint;\\r\\n        uint256 burn;\\r\\n        uint256 pause;\\r\\n        uint256 blacklist;\\r\\n        uint256 deflation;\\r\\n    }\\r\\n\\r\\n    address public owner;\\r\\n\\r\\n    // address factory_address;\\r\\n    address router_address;\\r\\n\\r\\n    mapping(address => address[]) tokens;\\r\\n\\r\\n    feeInfo public fee;\\r\\n    StandardTokenFactory internal standardTokenFactory;\\r\\n    LiquidityTokenFactory internal liquidityTokenFactory;\\r\\n\\r\\n    event OwnerWithdrawSuccess(uint256 value);\\r\\n    event CreateStandardSuccess(address);\\r\\n    event setOwnerSucess(address);\\r\\n    event createLiquditySuccess(address);\\r\\n    event InitFeeSuccess();\\r\\n\\r\\n    // constructor(address _owner, address factory_addr, address router_Addr) {\\r\\n    constructor(\\r\\n        address _owner,\\r\\n        address router_Addr,\\r\\n        StandardTokenFactory _standardTokenFactory,\\r\\n        LiquidityTokenFactory _liquidityTokenFactory\\r\\n    ) {\\r\\n        owner = _owner;\\r\\n        \\r\\n        fee = feeInfo(10000000000000,10000000000000,10000000000000,10000000000000,10000000000000,10000000000000);\\r\\n\\r\\n\\r\\n        // factory_address = factory_addr;\\r\\n        router_address = router_Addr;\\r\\n\\r\\n        standardTokenFactory = _standardTokenFactory;\\r\\n        liquidityTokenFactory = _liquidityTokenFactory;\\r\\n\\r\\n    }\\r\\n\\r\\n    function setOwner(address newowner) public {\\r\\n        require(msg.sender == owner, \\\"Only manager can do it\\\");\\r\\n        owner = newowner;\\r\\n        emit setOwnerSucess(owner);\\r\\n    }\\r\\n\\r\\n    function ownerWithdraw() public {\\r\\n        require(msg.sender == owner, \\\"Only manager can withdraw\\\");\\r\\n        address payable reciever = payable(owner);\\r\\n        reciever.transfer(address(this).balance);\\r\\n        // owner.transfer(address(this).balance);\\r\\n        emit OwnerWithdrawSuccess(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function initFee(feeInfo memory _fee) public {\\r\\n        fee = _fee;\\r\\n        emit InitFeeSuccess();\\r\\n    }\\r\\n\\r\\n    function calcFee(SharedStructs.status memory _state)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 totalfee = fee.normal;\\r\\n\\r\\n        if (_state.mintflag > 0) {\\r\\n            totalfee = totalfee + fee.mint;\\r\\n        }\\r\\n\\r\\n        if (_state.burnflag > 0) {\\r\\n            totalfee = totalfee + fee.burn;\\r\\n        }\\r\\n\\r\\n        if (_state.pauseflag > 0) {\\r\\n            totalfee = totalfee + fee.pause;\\r\\n        }\\r\\n\\r\\n        if (_state.blacklistflag > 0) {\\r\\n            totalfee = totalfee + fee.blacklist;\\r\\n        }\\r\\n\\r\\n        return totalfee;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Creates a new Presale contract and registers it in the PresaleFactory.sol.\\r\\n     */\\r\\n\\r\\n    function createStandard(\\r\\n        address creator_,\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint8 decimals_,\\r\\n        uint256 tokenSupply_,\\r\\n        SharedStructs.status memory _state\\r\\n    ) public payable {\\r\\n        require(msg.value >= calcFee(_state), \\\"Balance is insufficent\\\");\\r\\n\\r\\n        StandardToken token = standardTokenFactory.deploy(\\r\\n            creator_,\\r\\n            name_,\\r\\n            symbol_,\\r\\n            decimals_,\\r\\n            tokenSupply_,\\r\\n            _state\\r\\n        );\\r\\n\\r\\n        tokens[address(creator_)].push(address(token));\\r\\n\\r\\n        emit CreateStandardSuccess(address(token));\\r\\n    }\\r\\n\\r\\n    function createLiquidity(\\r\\n        address creator_,\\r\\n        address reciever,\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint8 decimal_,\\r\\n        uint256 supply,\\r\\n        uint256 settingflag,\\r\\n        uint256[4] memory fees,\\r\\n        SharedStructs.status memory _state\\r\\n    ) public payable {\\r\\n        require(msg.value >= calcFee(_state), \\\"Balance is insufficent\\\");\\r\\n\\r\\n        LiquidityToken token = liquidityTokenFactory.deploy(\\r\\n            router_address,\\r\\n            creator_,\\r\\n            reciever,\\r\\n            name_,\\r\\n            symbol_,\\r\\n            decimal_,\\r\\n            supply\\r\\n        );\\r\\n        token.setFee(settingflag, fees);\\r\\n        token.setStatus(_state);\\r\\n        tokens[creator_].push(address(token));\\r\\n\\r\\n        emit createLiquditySuccess(address(token));\\r\\n    }\\r\\n\\r\\n    function getBalance() public view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function getCreatedToken(address creater)\\r\\n        public\\r\\n        view\\r\\n        returns (address[] memory)\\r\\n    {\\r\\n        return tokens[address(creater)];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa643d84ffc42147d4c859e7d6be6320e7c93fd18ee2885132303d68dfc0406b9\",\"license\":\"MIT\"},\"contracts/CreateToken/Meter/LiquidityToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"./SharedStructs.sol\\\";\\r\\nimport \\\"../../interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"../../interfaces/IUniswapV2Factory.sol\\\";\\r\\n\\r\\ncontract LiquidityToken is Context, IERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    address payable public marketingAddress; // Marketing Address\\r\\n    address public immutable deadAddress =\\r\\n        0x000000000000000000000000000000000000dEaD;\\r\\n    address public owner;\\r\\n    address private manager;\\r\\n    mapping(address => uint256) private _rOwned;\\r\\n    mapping(address => uint256) private _tOwned;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    mapping(address => bool) private _isExcludedFromFee;\\r\\n\\r\\n    mapping(address => bool) private _isExcluded;\\r\\n    address[] private _excluded;\\r\\n\\r\\n    uint256 private constant MAX = type(uint256).max;\\r\\n    uint256 private _tTotal;\\r\\n    uint256 private _rTotal;\\r\\n    uint256 private _tFeeTotal;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    bool private _paused;\\r\\n    SharedStructs.status public state;\\r\\n\\r\\n    mapping(address => bool) _blacklist;\\r\\n\\r\\n    uint256 public _taxFee;\\r\\n    uint256 private _previousTaxFee;\\r\\n\\r\\n    uint256 public _liquidityFee;\\r\\n    uint256 private _previousLiquidityFee;\\r\\n\\r\\n    uint256 public marketingDivisor;\\r\\n\\r\\n    uint256 public _maxTxAmount = 5000000 * 10**6 * 10**9;\\r\\n    uint256 private minimumTokensBeforeSwap = 300000 * 10**6 * 10**9;\\r\\n    uint256 private buyBackUpperLimit = 1 * 10**18;\\r\\n\\r\\n    IUniswapV2Router02 public immutable UniswapRouter;\\r\\n    address public immutable UniswapPair;\\r\\n\\r\\n    bool inSwapAndLiquify;\\r\\n    bool public swapAndLiquifyEnabled;\\r\\n    bool public buyBackEnabled;\\r\\n\\r\\n    uint256 public isstandard = 2;\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(owner == msg.sender, \\\"Ownable: caller is not the creator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyManager() {\\r\\n        require(manager == _msgSender(), \\\"Manage:caller is not the manager\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n\\r\\n    modifier canMint() {\\r\\n        require(state.mintflag > 0, \\\"Mintable: Disabled Mint\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier canPause() {\\r\\n        require(state.mintflag > 0, \\\"Pausable: Disabled Pause\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier canBurn() {\\r\\n        require(state.burnflag > 0, \\\"Burnable: Disabled Burn\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier canBlacklist() {\\r\\n        require(state.blacklistflag > 0, \\\"Blacklist: Disabled Blacklist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused(), \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whenPaused() {\\r\\n        require(paused(), \\\"Pausable: not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event BlacklistUpdated(address indexed user, bool value);\\r\\n    event Paused(address account);\\r\\n    event Unpaused(address account);\\r\\n    event BurnSuccess(uint256);\\r\\n    event MintSuccess(uint256);\\r\\n\\r\\n    event RewardLiquidityProviders(uint256 tokenAmount);\\r\\n    event BuyBackEnabledUpdated(bool enabled);\\r\\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\\r\\n    event SwapAndLiquify(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 ethReceived,\\r\\n        uint256 tokensIntoLiqudity\\r\\n    );\\r\\n\\r\\n    event SwapETHForTokens(uint256 amountIn, address[] path);\\r\\n\\r\\n    event SwapTokensForETH(uint256 amountIn, address[] path);\\r\\n\\r\\n    modifier lockTheSwap() {\\r\\n        inSwapAndLiquify = true;\\r\\n        _;\\r\\n        inSwapAndLiquify = false;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address creator_,\\r\\n        address unirouter,\\r\\n        address reciever,\\r\\n        uint8 decimal_,\\r\\n        uint256 supply,\\r\\n        string memory name_,\\r\\n        string memory symbol_\\r\\n    ) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = decimal_;\\r\\n\\r\\n        IUniswapV2Router02 _UniswapRouter = IUniswapV2Router02(unirouter);\\r\\n        UniswapPair = IUniswapV2Factory(_UniswapRouter.factory()).createPair(\\r\\n            address(this),\\r\\n            _UniswapRouter.WETH()\\r\\n        );\\r\\n\\r\\n        UniswapRouter = _UniswapRouter;\\r\\n        manager = _msgSender();\\r\\n\\r\\n        set(creator_, reciever, supply);\\r\\n\\r\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\r\\n    }\\r\\n\\r\\n    function set(\\r\\n        address creator_,\\r\\n        address reciever,\\r\\n        uint256 supply\\r\\n    ) private {\\r\\n        marketingAddress = payable(reciever);\\r\\n        owner = creator_;\\r\\n        _tTotal = supply;\\r\\n        _rTotal = (MAX - (MAX % supply));\\r\\n\\r\\n        _rOwned[creator_] = _rTotal;\\r\\n\\r\\n        buyBackEnabled = false;\\r\\n        swapAndLiquifyEnabled = false;\\r\\n\\r\\n        _isExcludedFromFee[creator_] = true;\\r\\n        _isExcludedFromFee[address(this)] = true;\\r\\n\\r\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\r\\n    }\\r\\n\\r\\n    function setStatus(SharedStructs.status memory _state)\\r\\n        external\\r\\n        onlyManager\\r\\n    {\\r\\n        state = _state;\\r\\n    }\\r\\n\\r\\n    function setFee(uint256 settingflag, uint256[4] memory fee)\\r\\n        external\\r\\n        onlyManager\\r\\n    {\\r\\n        if (settingflag != 0 && settingflag != 1) {\\r\\n            swapAndLiquifyEnabled = true;\\r\\n        }\\r\\n\\r\\n        if (settingflag == 1 || settingflag == 2) {\\r\\n            buyBackEnabled = true;\\r\\n        }\\r\\n\\r\\n        if (settingflag != 3) {\\r\\n            _taxFee = fee[0];\\r\\n            marketingDivisor = fee[1];\\r\\n        }\\r\\n\\r\\n        if (settingflag == 1 || settingflag == 2) {\\r\\n            marketingDivisor = fee[2];\\r\\n        }\\r\\n\\r\\n        if (settingflag == 3 || settingflag == 4) {\\r\\n            _liquidityFee = fee[3];\\r\\n        }\\r\\n\\r\\n        // if(settingflag != 0) {\\r\\n        //    _holdersfee = fee[0];\\r\\n        //     // _buybackFee = fee[1];\\r\\n        // }\\r\\n\\r\\n        _previousTaxFee = _taxFee;\\r\\n        _previousLiquidityFee = _liquidityFee;\\r\\n    }\\r\\n\\r\\n    function mint(uint256 amount) public onlyOwner canMint {\\r\\n        require(_tTotal + amount <= MAX, \\\"exceeds limit\\\");\\r\\n\\r\\n        _beforeTokenTransfer(msg.sender, msg.sender, amount);\\r\\n\\r\\n        _tTotal = _tTotal + amount;\\r\\n        _tFeeTotal = _tFeeTotal + amount;\\r\\n\\r\\n        // uint256 tAmount;\\r\\n\\r\\n        // if (_isExcluded[account]) {\\r\\n        //     _tOwned[account] = _tOwned[account].add(amount);\\r\\n        // } else {\\r\\n        //     tAmount = tokenFromReflection(_rOwned[account]);\\r\\n        //     tAmount = tAmount.add(amount);\\r\\n        //     _rOwned[account] = tokenFromReflection(tAmount);\\r\\n        // }\\r\\n\\r\\n        emit MintSuccess(amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function burn(uint256 amount) public onlyOwner canBurn {\\r\\n        require(amount <= MAX, \\\"exceeds limit\\\");\\r\\n\\r\\n        _beforeTokenTransfer(msg.sender, address(0), amount);\\r\\n\\r\\n        _tTotal = _tTotal - amount;\\r\\n        _tFeeTotal = _tFeeTotal + amount;\\r\\n\\r\\n        emit BurnSuccess(amount);\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        if (_isExcluded[account]) return _tOwned[account];\\r\\n        return tokenFromReflection(_rOwned[account]);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _beforeTokenTransfer(msg.sender, recipient, amount);\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address _owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[_owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _beforeTokenTransfer(msg.sender, spender, amount);\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n        _transfer(sender, recipient, amount);\\r\\n        require(\\r\\n            amount <= _allowances[sender][msg.sender],\\r\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\r\\n        );\\r\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            msg.sender,\\r\\n            spender,\\r\\n            _allowances[msg.sender][spender] + addedValue\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(\\r\\n            subtractedValue <= _allowances[msg.sender][spender],\\r\\n            \\\"ERC20: decreased allowance below zero\\\"\\r\\n        );\\r\\n        _approve(\\r\\n            msg.sender,\\r\\n            spender,\\r\\n            _allowances[msg.sender][spender] - subtractedValue\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function isExcludedFromReward(address account) public view returns (bool) {\\r\\n        return _isExcluded[account];\\r\\n    }\\r\\n\\r\\n    function totalFees() public view returns (uint256) {\\r\\n        return _tFeeTotal;\\r\\n    }\\r\\n\\r\\n    function minimumTokensBeforeSwapAmount() public view returns (uint256) {\\r\\n        return minimumTokensBeforeSwap;\\r\\n    }\\r\\n\\r\\n    function buyBackUpperLimitAmount() public view returns (uint256) {\\r\\n        return buyBackUpperLimit;\\r\\n    }\\r\\n\\r\\n    function deliver(uint256 tAmount) public {\\r\\n        _beforeTokenTransfer(msg.sender, msg.sender, tAmount);\\r\\n        address sender = msg.sender;\\r\\n        require(\\r\\n            !_isExcluded[sender],\\r\\n            \\\"Excluded addresses cannot call this function\\\"\\r\\n        );\\r\\n        (uint256 rAmount, , , , , ) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender] - rAmount;\\r\\n        _rTotal = _rTotal - rAmount;\\r\\n        _tFeeTotal = _tFeeTotal + tAmount;\\r\\n    }\\r\\n\\r\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\r\\n        if (!deductTransferFee) {\\r\\n            (uint256 rAmount, , , , , ) = _getValues(tAmount);\\r\\n            return rAmount;\\r\\n        } else {\\r\\n            (, uint256 rTransferAmount, , , , ) = _getValues(tAmount);\\r\\n            return rTransferAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenFromReflection(uint256 rAmount)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(\\r\\n            rAmount <= _rTotal,\\r\\n            \\\"Amount must be less than total reflections\\\"\\r\\n        );\\r\\n        uint256 currentRate = _getRate();\\r\\n        return rAmount / currentRate;\\r\\n    }\\r\\n\\r\\n    function excludeFromReward(address account) public onlyOwner {\\r\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\r\\n        if (_rOwned[account] > 0) {\\r\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\r\\n        }\\r\\n        _isExcluded[account] = true;\\r\\n        _excluded.push(account);\\r\\n    }\\r\\n\\r\\n    function includeInReward(address account) external onlyOwner {\\r\\n        require(_isExcluded[account], \\\"Account is already excluded\\\");\\r\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (_excluded[i] == account) {\\r\\n                _excluded[i] = _excluded[_excluded.length - 1];\\r\\n                _tOwned[account] = 0;\\r\\n                _isExcluded[account] = false;\\r\\n                _excluded.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address _owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(_owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        if (from != owner && to != owner) {\\r\\n            require(\\r\\n                amount <= _maxTxAmount,\\r\\n                \\\"Transfer amount exceeds the maxTxAmount.\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n        bool overMinimumTokenBalance = contractTokenBalance >=\\r\\n            minimumTokensBeforeSwap;\\r\\n\\r\\n        if (!inSwapAndLiquify && swapAndLiquifyEnabled && to == UniswapPair) {\\r\\n            if (overMinimumTokenBalance) {\\r\\n                contractTokenBalance = minimumTokensBeforeSwap;\\r\\n                swapTokens(contractTokenBalance);\\r\\n            }\\r\\n            uint256 balance = address(this).balance;\\r\\n            if (buyBackEnabled && balance > uint256(1 * 10**18)) {\\r\\n                if (balance > buyBackUpperLimit) balance = buyBackUpperLimit;\\r\\n\\r\\n                buyBackTokens(balance / 100);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        bool takeFee = true;\\r\\n\\r\\n        //if any account belongs to _isExcludedFromFee account then remove the fee\\r\\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n\\r\\n        _tokenTransfer(from, to, amount, takeFee);\\r\\n    }\\r\\n\\r\\n    function swapTokens(uint256 contractTokenBalance) private lockTheSwap {\\r\\n        uint256 initialBalance = address(this).balance;\\r\\n        swapTokensForETH(contractTokenBalance);\\r\\n        uint256 transferredBalance = address(this).balance - initialBalance;\\r\\n\\r\\n        //Send to Marketing address\\r\\n        transferToAddressETH(\\r\\n            marketingAddress,\\r\\n            (transferredBalance / _liquidityFee) * marketingDivisor\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function buyBackTokens(uint256 amount) private lockTheSwap {\\r\\n        if (amount > 0) {\\r\\n            swapETHForTokens(amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapTokensForETH(uint256 tokenAmount) private {\\r\\n        // generate the Uniswap pair path of token -> wETH\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = UniswapRouter.WETH();\\r\\n\\r\\n        _approve(address(this), address(UniswapRouter), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n        UniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this), // The contract\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        emit SwapTokensForETH(tokenAmount, path);\\r\\n    }\\r\\n\\r\\n    function swapETHForTokens(uint256 amount) private {\\r\\n        // generate the Uniswap pair path of token -> wETH\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = UniswapRouter.WETH();\\r\\n        path[1] = address(this);\\r\\n\\r\\n        // make the swap\\r\\n        UniswapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{\\r\\n            value: amount\\r\\n        }(\\r\\n            0, // accept any amount of Tokens\\r\\n            path,\\r\\n            deadAddress, // Burn address\\r\\n            block.timestamp + 300\\r\\n        );\\r\\n\\r\\n        emit SwapETHForTokens(amount, path);\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\\r\\n        // approve token transfer to cover all possible scenarios\\r\\n        _approve(address(this), address(UniswapRouter), tokenAmount);\\r\\n\\r\\n        // add the liquidity\\r\\n        UniswapRouter.addLiquidityETH{value: ETHAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            owner,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _tokenTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        bool takeFee\\r\\n    ) private {\\r\\n        if (!takeFee) removeAllFee();\\r\\n\\r\\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\\r\\n            _transferFromExcluded(sender, recipient, amount);\\r\\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\r\\n            _transferToExcluded(sender, recipient, amount);\\r\\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\r\\n            _transferBothExcluded(sender, recipient, amount);\\r\\n        } else {\\r\\n            _transferStandard(sender, recipient, amount);\\r\\n        }\\r\\n\\r\\n        if (!takeFee) restoreAllFee();\\r\\n    }\\r\\n\\r\\n    function _transferStandard(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 rAmount,\\r\\n            uint256 rTransferAmount,\\r\\n            uint256 rFee,\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity\\r\\n        ) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender] - rAmount;\\r\\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\\r\\n        _takeLiquidity(tLiquidity);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferToExcluded(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 rAmount,\\r\\n            uint256 rTransferAmount,\\r\\n            uint256 rFee,\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity\\r\\n        ) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender] - rAmount;\\r\\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\\r\\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\\r\\n        _takeLiquidity(tLiquidity);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferFromExcluded(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 rAmount,\\r\\n            uint256 rTransferAmount,\\r\\n            uint256 rFee,\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity\\r\\n        ) = _getValues(tAmount);\\r\\n        _tOwned[sender] = _tOwned[sender] - tAmount;\\r\\n        _rOwned[sender] = _rOwned[sender] - rAmount;\\r\\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\\r\\n        _takeLiquidity(tLiquidity);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferBothExcluded(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 rAmount,\\r\\n            uint256 rTransferAmount,\\r\\n            uint256 rFee,\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity\\r\\n        ) = _getValues(tAmount);\\r\\n        _tOwned[sender] = _tOwned[sender] - tAmount;\\r\\n        _rOwned[sender] = _rOwned[sender] - rAmount;\\r\\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\\r\\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\\r\\n        _takeLiquidity(tLiquidity);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\r\\n        _rTotal = _rTotal - rFee;\\r\\n        _tFeeTotal = _tFeeTotal + tFee;\\r\\n    }\\r\\n\\r\\n    function _getValues(uint256 tAmount)\\r\\n        private\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        (\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity\\r\\n        ) = _getTValues(tAmount);\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\r\\n            tAmount,\\r\\n            tFee,\\r\\n            tLiquidity,\\r\\n            _getRate()\\r\\n        );\\r\\n        return (\\r\\n            rAmount,\\r\\n            rTransferAmount,\\r\\n            rFee,\\r\\n            tTransferAmount,\\r\\n            tFee,\\r\\n            tLiquidity\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _getTValues(uint256 tAmount)\\r\\n        private\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        uint256 tFee = calculateTaxFee(tAmount);\\r\\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\\r\\n        uint256 tTransferAmount = tAmount - tFee - tLiquidity;\\r\\n        return (tTransferAmount, tFee, tLiquidity);\\r\\n    }\\r\\n\\r\\n    function _getRValues(\\r\\n        uint256 tAmount,\\r\\n        uint256 tFee,\\r\\n        uint256 tLiquidity,\\r\\n        uint256 currentRate\\r\\n    )\\r\\n        private\\r\\n        pure\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        uint256 rAmount = tAmount * currentRate;\\r\\n        uint256 rFee = tFee * currentRate;\\r\\n        uint256 rLiquidity = tLiquidity * currentRate;\\r\\n        uint256 rTransferAmount = rAmount - rFee - rLiquidity;\\r\\n        return (rAmount, rTransferAmount, rFee);\\r\\n    }\\r\\n\\r\\n    function _getRate() private view returns (uint256) {\\r\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n        return rSupply / tSupply;\\r\\n    }\\r\\n\\r\\n    function _getCurrentSupply() private view returns (uint256, uint256) {\\r\\n        uint256 rSupply = _rTotal;\\r\\n        uint256 tSupply = _tTotal;\\r\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (\\r\\n                _rOwned[_excluded[i]] > rSupply ||\\r\\n                _tOwned[_excluded[i]] > tSupply\\r\\n            ) return (_rTotal, _tTotal);\\r\\n            rSupply = rSupply - _rOwned[_excluded[i]];\\r\\n            tSupply = tSupply - _tOwned[_excluded[i]];\\r\\n        }\\r\\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\\r\\n        return (rSupply, tSupply);\\r\\n    }\\r\\n\\r\\n    function _takeLiquidity(uint256 tLiquidity) private {\\r\\n        uint256 currentRate = _getRate();\\r\\n        uint256 rLiquidity = tLiquidity * currentRate;\\r\\n        _rOwned[address(this)] = _rOwned[address(this)] + rLiquidity;\\r\\n        if (_isExcluded[address(this)])\\r\\n            _tOwned[address(this)] = _tOwned[address(this)] + tLiquidity;\\r\\n    }\\r\\n\\r\\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\\r\\n        return (_amount * _taxFee) / (10**2);\\r\\n    }\\r\\n\\r\\n    function calculateLiquidityFee(uint256 _amount)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return (_amount * _liquidityFee) / (10**2);\\r\\n    }\\r\\n\\r\\n    function removeAllFee() private {\\r\\n        if (_taxFee == 0 && _liquidityFee == 0) return;\\r\\n\\r\\n        _previousTaxFee = _taxFee;\\r\\n        _previousLiquidityFee = _liquidityFee;\\r\\n\\r\\n        _taxFee = 0;\\r\\n        _liquidityFee = 0;\\r\\n    }\\r\\n\\r\\n    function restoreAllFee() private {\\r\\n        _taxFee = _previousTaxFee;\\r\\n        _liquidityFee = _previousLiquidityFee;\\r\\n    }\\r\\n\\r\\n    function isExcludedFromFee(address account) public view returns (bool) {\\r\\n        return _isExcludedFromFee[account];\\r\\n    }\\r\\n\\r\\n    function excludeFromFee(address account) public onlyOwner {\\r\\n        _isExcludedFromFee[account] = true;\\r\\n    }\\r\\n\\r\\n    function includeInFee(address account) public onlyOwner {\\r\\n        _isExcludedFromFee[account] = false;\\r\\n    }\\r\\n\\r\\n    function blacklistUpdate(address user, bool value)\\r\\n        public\\r\\n        virtual\\r\\n        onlyOwner\\r\\n        canBlacklist\\r\\n    {\\r\\n        // require(_owner == msg.sender, \\\"Only owner is allowed to modify blacklist.\\\");\\r\\n        _blacklist[user] = value;\\r\\n        emit BlacklistUpdated(user, value);\\r\\n    }\\r\\n\\r\\n    function isBlackListed(address user)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        canBlacklist\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _blacklist[user];\\r\\n    }\\r\\n\\r\\n    function paused() public view virtual canPause returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    function _pause() public virtual onlyOwner canPause whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _unpause() public virtual onlyOwner canPause whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address sender,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        // require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        // require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount >= 0, \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        if (state.blacklistflag > 0) {\\r\\n            require(\\r\\n                !isBlackListed(sender),\\r\\n                \\\"Token transfer refused. Receiver is on blacklist\\\"\\r\\n            );\\r\\n            require(\\r\\n                !isBlackListed(to),\\r\\n                \\\"Token transfer refused. Receiver is on blacklist\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (state.pauseflag > 0) {\\r\\n            require(!paused(), \\\"Token is Paused.\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferToAddressETH(address payable recipient, uint256 amount)\\r\\n        private\\r\\n    {\\r\\n        recipient.transfer(amount);\\r\\n    }\\r\\n\\r\\n    //to recieve ETH from UniswapRouter when swaping\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0xc1517ee6020bea7422180e8d18df2431dd11066ac57b881947fdbea8d8c3efe7\",\"license\":\"MIT\"},\"contracts/CreateToken/Meter/LiquidityTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./StandardToken.sol\\\";\\r\\nimport \\\"./LiquidityToken.sol\\\";\\r\\n\\r\\ncontract LiquidityTokenFactory {\\r\\n    function deploy(\\r\\n        address router_address,\\r\\n        address creator_,\\r\\n        address reciever,\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint8 decimal_,\\r\\n        uint256 supply\\r\\n    ) external returns (LiquidityToken) {\\r\\n        return\\r\\n            new LiquidityToken(\\r\\n                creator_,\\r\\n                router_address,\\r\\n                reciever,\\r\\n                decimal_,\\r\\n                supply,\\r\\n                name_,\\r\\n                symbol_\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeb808e6030cca8c01fd338d812efc28a674e5de672fd3dba95e3d24e61500ff7\",\"license\":\"MIT\"},\"contracts/CreateToken/Meter/SharedStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary SharedStructs {\\r\\n    struct status {\\r\\n        uint256 mintflag;\\r\\n        uint256 pauseflag;\\r\\n        uint256 burnflag;\\r\\n        uint256 blacklistflag;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf19b22dc06d601263e6a606f69727db4dcc50bba0a36a96d5631e2a00fc20f6a\",\"license\":\"MIT\"},\"contracts/CreateToken/Meter/StandardToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"./SharedStructs.sol\\\";\\r\\n\\r\\ncontract StandardToken is Context, IERC20, IERC20Metadata {\\r\\n    // address public owner;\\r\\n    address public owner;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    uint256 public isstandard = 1;\\r\\n\\r\\n    bool private _paused;\\r\\n    SharedStructs.status public state;\\r\\n\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    mapping(address => bool) _blacklist;\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier canMint() {\\r\\n        require(state.mintflag > 0, \\\"Mintable: Disabled Mint\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier canPause() {\\r\\n        require(state.mintflag > 0, \\\"Pausable: Disabled Pause\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier canBurn() {\\r\\n        require(state.burnflag > 0, \\\"Burnable: Disabled Burn\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier canBlacklist() {\\r\\n        require(state.blacklistflag > 0, \\\"Blacklist: Disabled Blacklist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused(), \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whenPaused() {\\r\\n        require(paused(), \\\"Pausable: not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event BlacklistUpdated(address indexed user, bool value);\\r\\n    event Paused(address account);\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name}, {symbol} and {decimals}.\\r\\n     *\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(\\r\\n        address creator_,\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint8 decimals_,\\r\\n        uint256 tokenSupply_,\\r\\n        SharedStructs.status memory _state\\r\\n    ) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = decimals_;\\r\\n        owner = creator_;\\r\\n\\r\\n        state = _state;\\r\\n\\r\\n        _mint(creator_, tokenSupply_);\\r\\n\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    function setStatus(SharedStructs.status memory _state) internal virtual {\\r\\n        state = _state;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address _owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[_owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(\\r\\n            currentAllowance >= amount,\\r\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\r\\n        );\\r\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender] + addedValue\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(\\r\\n            currentAllowance >= subtractedValue,\\r\\n            \\\"ERC20: decreased allowance below zero\\\"\\r\\n        );\\r\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(\\r\\n            senderBalance >= amount,\\r\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        _balances[sender] = senderBalance - amount;\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function mint(address account, uint256 amount)\\r\\n        public\\r\\n        virtual\\r\\n        onlyOwner\\r\\n        canMint\\r\\n    {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function burn(uint256 amount) public virtual onlyOwner canBurn {\\r\\n        require(\\r\\n            _msgSender() != address(0),\\r\\n            \\\"ERC20: burn from the zero address\\\"\\r\\n        );\\r\\n\\r\\n        _beforeTokenTransfer(_msgSender(), address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[_msgSender()];\\r\\n\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n\\r\\n        _balances[_msgSender()] = accountBalance - amount;\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(_msgSender(), address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address _owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(_owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[_owner][spender] = amount;\\r\\n        emit Approval(_owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function blacklistUpdate(address user, bool value)\\r\\n        public\\r\\n        virtual\\r\\n        onlyOwner\\r\\n        canBlacklist\\r\\n    {\\r\\n        // require(_owner == _msgSender(), \\\"Only owner is allowed to modify blacklist.\\\");\\r\\n        _blacklist[user] = value;\\r\\n        emit BlacklistUpdated(user, value);\\r\\n    }\\r\\n\\r\\n    function isBlackListed(address user)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        canBlacklist\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _blacklist[user];\\r\\n    }\\r\\n\\r\\n    function paused() public view virtual canPause returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    function _pause() public virtual onlyOwner canPause whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    function _unpause() public virtual onlyOwner canPause whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address sender,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        // require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        // require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount >= 0, \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        if (state.blacklistflag > 0) {\\r\\n            require(\\r\\n                !isBlackListed(sender),\\r\\n                \\\"Token transfer refused. Receiver is on blacklist\\\"\\r\\n            );\\r\\n            require(\\r\\n                !isBlackListed(to),\\r\\n                \\\"Token transfer refused. Receiver is on blacklist\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (state.pauseflag > 0) {\\r\\n            require(!paused(), \\\"Token is Paused.\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe67a74f96f9d56b409e03cf385335aaa421e6d3aa8e5b74587f01b3f0e4e7b7a\",\"license\":\"MIT\"},\"contracts/CreateToken/Meter/StandardTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./StandardToken.sol\\\";\\r\\n\\r\\ncontract StandardTokenFactory {\\r\\n    function deploy(\\r\\n        address creator_,\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint8 decimals_,\\r\\n        uint256 tokenSupply_,\\r\\n        SharedStructs.status memory _state\\r\\n    ) external returns (StandardToken) {\\r\\n        return\\r\\n            new StandardToken(\\r\\n                creator_,\\r\\n                name_,\\r\\n                symbol_,\\r\\n                decimals_,\\r\\n                tokenSupply_,\\r\\n                _state\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf8628ad6e7393c47d02251980aa7cb17b4474d7af7ee31613fbcf5066350162a\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint256\\r\\n    );\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        view\\r\\n        returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xca92f4edf6623dd66d4fdb30c7f5535cba777d98e07466f3f37e153d4ec1960d\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n}\\r\\n\",\"keccak256\":\"0x44e1587fd2f307a17045e4b343f94a03d7168d7bd80261693f4983d8005b8127\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./IUniswapV2Router01.sol\\\";\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf7ed4faf65481dc2eaed78b51ab5ff1daa65c48a32f4cabb0bf52c1a2e39f45f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516200121f3803806200121f833981016040819052610031916100d5565b600080546001600160a01b039586166001600160a01b0319918216179091556040805160c0810182526509184e72a00080825260208201819052918101829052606081018290526080810182905260a0018190526003819055600481905560058190556006819055600781905560085560018054948616948216949094179093556009805492851692841692909217909155600a805491909316911617905561014c565b600080600080608085870312156100eb57600080fd5b84516100f681610134565b602086015190945061010781610134565b604086015190935061011881610134565b606086015190925061012981610134565b939692955090935050565b6001600160a01b038116811461014957600080fd5b50565b6110c3806200015c6000396000f3fe6080604052600436106100965760003560e01c806376f444a311610069578063cf3059721161004e578063cf30597214610184578063ddca3f4314610197578063df251962146101ef57600080fd5b806376f444a31461011f5780638da5cb5b1461013257600080fd5b806312065fe01461009b57806313af4035146100bb57806336646180146100dd5780634311de8f1461010a575b600080fd5b3480156100a757600080fd5b506040514781526020015b60405180910390f35b3480156100c757600080fd5b506100db6100d6366004610ba8565b61020f565b005b3480156100e957600080fd5b506100fd6100f8366004610ba8565b61030f565b6040516100b29190610f3d565b34801561011657600080fd5b506100db61039f565b6100db61012d366004610bcc565b61049b565b34801561013e57600080fd5b5060005461015f9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100b2565b6100db610192366004610c9d565b610779565b3480156101a357600080fd5b506003546004546005546006546007546008546101c295949392919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016100b2565b3480156101fb57600080fd5b506100db61020a366004610d5c565b610941565b60005473ffffffffffffffffffffffffffffffffffffffff163314610295576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c79206d616e616765722063616e20646f2069740000000000000000000060448201526064015b60405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f2ad00119c52384b34359201efdeae8e4bcc95b285f433b645adb782ef8ffb367906020015b60405180910390a150565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602090815260409182902080548351818402810184019094528084526060939283018282801561039357602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610368575b50505050509050919050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610420576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4f6e6c79206d616e616765722063616e20776974686472617700000000000000604482015260640161028c565b6000805460405173ffffffffffffffffffffffffffffffffffffffff9091169182914780156108fc0292909190818181858888f1935050505015801561046a573d6000803e3d6000fd5b506040514781527fc67a6e2c9e13b320d5ce7e24743ea93ba9261320310966dd6240569493690eff90602001610304565b6104a481610999565b34101561050d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f42616c616e636520697320696e737566666963656e7400000000000000000000604482015260640161028c565b600a546001546040517fb304372d00000000000000000000000000000000000000000000000000000000815260009273ffffffffffffffffffffffffffffffffffffffff9081169263b304372d9261057792909116908e908e908e908e908e908e90600401610e41565b602060405180830381600087803b15801561059157600080fd5b505af11580156105a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c99190610d3f565b6040517f67d2465600000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff8216906367d24656906106209087908790600401610fc2565b600060405180830381600087803b15801561063a57600080fd5b505af115801561064e573d6000803e3d6000fd5b50506040517f245e579800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416925063245e579891506106a4908590600401610f97565b600060405180830381600087803b1580156106be57600080fd5b505af11580156106d2573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff8a8116600090815260026020908152604080832080546001810182559084529282902090920180547fffffffffffffffffffffffff000000000000000000000000000000000000000016938516938417905590519182527fd38b5c5c827552bf78686fe20cff5da58946cbe6fab7a370a203e365ced42253910160405180910390a150505050505050505050565b61078281610999565b3410156107eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f42616c616e636520697320696e737566666963656e7400000000000000000000604482015260640161028c565b6009546040517f213db6b700000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063213db6b79061084c908a908a908a908a908a908a90600401610eae565b602060405180830381600087803b15801561086657600080fd5b505af115801561087a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089e9190610d3f565b73ffffffffffffffffffffffffffffffffffffffff888116600090815260026020908152604080832080546001810182559084529282902090920180547fffffffffffffffffffffffff000000000000000000000000000000000000000016938516938417905590519182529192507f11d95a3a35d0b4b9b14fd17216057aeefef842668d998184cb9f2e114a467a91910160405180910390a150505050505050565b805160035560208101516004556040808201516005556060820151600655608082015160075560a0820151600855517f03855d30824d2deef7728a39f080e5bdad2c59aaeaf4397540a00186095d463a90600090a150565b600354815160009190156109b7576004546109b49082610ffa565b90505b6040830151156109d1576005546109ce9082610ffa565b90505b6020830151156109eb576006546109e89082610ffa565b90505b606083015115610a0557600754610a029082610ffa565b90505b92915050565b600082601f830112610a1c57600080fd5b6040516080810181811067ffffffffffffffff82111715610a3f57610a3f611039565b604052808360808101861015610a5457600080fd5b60005b6004811015610a76578135835260209283019290910190600101610a57565b509195945050505050565b600082601f830112610a9257600080fd5b813567ffffffffffffffff80821115610aad57610aad611039565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610af357610af3611039565b81604052838152866020858801011115610b0c57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060808284031215610b3e57600080fd5b6040516080810181811067ffffffffffffffff82111715610b6157610b61611039565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b803560ff81168114610ba357600080fd5b919050565b600060208284031215610bba57600080fd5b8135610bc581611068565b9392505050565b60008060008060008060008060006101e08a8c031215610beb57600080fd5b8935610bf681611068565b985060208a0135610c0681611068565b975060408a013567ffffffffffffffff80821115610c2357600080fd5b610c2f8d838e01610a81565b985060608c0135915080821115610c4557600080fd5b50610c528c828d01610a81565b965050610c6160808b01610b92565b945060a08a0135935060c08a01359250610c7e8b60e08c01610a0b565b9150610c8e8b6101608c01610b2c565b90509295985092959850929598565b6000806000806000806101208789031215610cb757600080fd5b8635610cc281611068565b9550602087013567ffffffffffffffff80821115610cdf57600080fd5b610ceb8a838b01610a81565b96506040890135915080821115610d0157600080fd5b50610d0e89828a01610a81565b945050610d1d60608801610b92565b925060808701359150610d338860a08901610b2c565b90509295509295509295565b600060208284031215610d5157600080fd5b8151610bc581611068565b600060c08284031215610d6e57600080fd5b60405160c0810181811067ffffffffffffffff82111715610d9157610d91611039565b8060405250823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201528091505092915050565b6000815180845260005b81811015610dfc57602081850181015186830182015201610de0565b81811115610e0e576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600073ffffffffffffffffffffffffffffffffffffffff808a168352808916602084015280881660408401525060e06060830152610e8260e0830187610dd6565b8281036080840152610e948187610dd6565b60ff9590951660a0840152505060c0015295945050505050565b600061012073ffffffffffffffffffffffffffffffffffffffff89168352806020840152610ede81840189610dd6565b90508281036040840152610ef28188610dd6565b91505060ff85166060830152836080830152610f3260a0830184805182526020810151602083015260408101516040830152606081015160608301525050565b979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015610f8b57835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610f59565b50909695505050505050565b8151815260208083015190820152604080830151908201526060808301519082015260808101610a05565b82815260a0810160208083018460005b6004811015610fef57815183529183019190830190600101610fd2565b505050509392505050565b60008219821115611034577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461108a57600080fd5b5056fea264697066735822122098786ea183e240a14df98691b081eccc6bfd882873071b02175f27f01a0e2f5d64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100965760003560e01c806376f444a311610069578063cf3059721161004e578063cf30597214610184578063ddca3f4314610197578063df251962146101ef57600080fd5b806376f444a31461011f5780638da5cb5b1461013257600080fd5b806312065fe01461009b57806313af4035146100bb57806336646180146100dd5780634311de8f1461010a575b600080fd5b3480156100a757600080fd5b506040514781526020015b60405180910390f35b3480156100c757600080fd5b506100db6100d6366004610ba8565b61020f565b005b3480156100e957600080fd5b506100fd6100f8366004610ba8565b61030f565b6040516100b29190610f3d565b34801561011657600080fd5b506100db61039f565b6100db61012d366004610bcc565b61049b565b34801561013e57600080fd5b5060005461015f9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100b2565b6100db610192366004610c9d565b610779565b3480156101a357600080fd5b506003546004546005546006546007546008546101c295949392919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016100b2565b3480156101fb57600080fd5b506100db61020a366004610d5c565b610941565b60005473ffffffffffffffffffffffffffffffffffffffff163314610295576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c79206d616e616765722063616e20646f2069740000000000000000000060448201526064015b60405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f2ad00119c52384b34359201efdeae8e4bcc95b285f433b645adb782ef8ffb367906020015b60405180910390a150565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602090815260409182902080548351818402810184019094528084526060939283018282801561039357602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610368575b50505050509050919050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610420576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4f6e6c79206d616e616765722063616e20776974686472617700000000000000604482015260640161028c565b6000805460405173ffffffffffffffffffffffffffffffffffffffff9091169182914780156108fc0292909190818181858888f1935050505015801561046a573d6000803e3d6000fd5b506040514781527fc67a6e2c9e13b320d5ce7e24743ea93ba9261320310966dd6240569493690eff90602001610304565b6104a481610999565b34101561050d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f42616c616e636520697320696e737566666963656e7400000000000000000000604482015260640161028c565b600a546001546040517fb304372d00000000000000000000000000000000000000000000000000000000815260009273ffffffffffffffffffffffffffffffffffffffff9081169263b304372d9261057792909116908e908e908e908e908e908e90600401610e41565b602060405180830381600087803b15801561059157600080fd5b505af11580156105a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c99190610d3f565b6040517f67d2465600000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff8216906367d24656906106209087908790600401610fc2565b600060405180830381600087803b15801561063a57600080fd5b505af115801561064e573d6000803e3d6000fd5b50506040517f245e579800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416925063245e579891506106a4908590600401610f97565b600060405180830381600087803b1580156106be57600080fd5b505af11580156106d2573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff8a8116600090815260026020908152604080832080546001810182559084529282902090920180547fffffffffffffffffffffffff000000000000000000000000000000000000000016938516938417905590519182527fd38b5c5c827552bf78686fe20cff5da58946cbe6fab7a370a203e365ced42253910160405180910390a150505050505050505050565b61078281610999565b3410156107eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f42616c616e636520697320696e737566666963656e7400000000000000000000604482015260640161028c565b6009546040517f213db6b700000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063213db6b79061084c908a908a908a908a908a908a90600401610eae565b602060405180830381600087803b15801561086657600080fd5b505af115801561087a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089e9190610d3f565b73ffffffffffffffffffffffffffffffffffffffff888116600090815260026020908152604080832080546001810182559084529282902090920180547fffffffffffffffffffffffff000000000000000000000000000000000000000016938516938417905590519182529192507f11d95a3a35d0b4b9b14fd17216057aeefef842668d998184cb9f2e114a467a91910160405180910390a150505050505050565b805160035560208101516004556040808201516005556060820151600655608082015160075560a0820151600855517f03855d30824d2deef7728a39f080e5bdad2c59aaeaf4397540a00186095d463a90600090a150565b600354815160009190156109b7576004546109b49082610ffa565b90505b6040830151156109d1576005546109ce9082610ffa565b90505b6020830151156109eb576006546109e89082610ffa565b90505b606083015115610a0557600754610a029082610ffa565b90505b92915050565b600082601f830112610a1c57600080fd5b6040516080810181811067ffffffffffffffff82111715610a3f57610a3f611039565b604052808360808101861015610a5457600080fd5b60005b6004811015610a76578135835260209283019290910190600101610a57565b509195945050505050565b600082601f830112610a9257600080fd5b813567ffffffffffffffff80821115610aad57610aad611039565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610af357610af3611039565b81604052838152866020858801011115610b0c57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060808284031215610b3e57600080fd5b6040516080810181811067ffffffffffffffff82111715610b6157610b61611039565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b803560ff81168114610ba357600080fd5b919050565b600060208284031215610bba57600080fd5b8135610bc581611068565b9392505050565b60008060008060008060008060006101e08a8c031215610beb57600080fd5b8935610bf681611068565b985060208a0135610c0681611068565b975060408a013567ffffffffffffffff80821115610c2357600080fd5b610c2f8d838e01610a81565b985060608c0135915080821115610c4557600080fd5b50610c528c828d01610a81565b965050610c6160808b01610b92565b945060a08a0135935060c08a01359250610c7e8b60e08c01610a0b565b9150610c8e8b6101608c01610b2c565b90509295985092959850929598565b6000806000806000806101208789031215610cb757600080fd5b8635610cc281611068565b9550602087013567ffffffffffffffff80821115610cdf57600080fd5b610ceb8a838b01610a81565b96506040890135915080821115610d0157600080fd5b50610d0e89828a01610a81565b945050610d1d60608801610b92565b925060808701359150610d338860a08901610b2c565b90509295509295509295565b600060208284031215610d5157600080fd5b8151610bc581611068565b600060c08284031215610d6e57600080fd5b60405160c0810181811067ffffffffffffffff82111715610d9157610d91611039565b8060405250823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201528091505092915050565b6000815180845260005b81811015610dfc57602081850181015186830182015201610de0565b81811115610e0e576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600073ffffffffffffffffffffffffffffffffffffffff808a168352808916602084015280881660408401525060e06060830152610e8260e0830187610dd6565b8281036080840152610e948187610dd6565b60ff9590951660a0840152505060c0015295945050505050565b600061012073ffffffffffffffffffffffffffffffffffffffff89168352806020840152610ede81840189610dd6565b90508281036040840152610ef28188610dd6565b91505060ff85166060830152836080830152610f3260a0830184805182526020810151602083015260408101516040830152606081015160608301525050565b979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015610f8b57835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610f59565b50909695505050505050565b8151815260208083015190820152604080830151908201526060808301519082015260808101610a05565b82815260a0810160208083018460005b6004811015610fef57815183529183019190830190600101610fd2565b505050509392505050565b60008219821115611034577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461108a57600080fd5b5056fea264697066735822122098786ea183e240a14df98691b081eccc6bfd882873071b02175f27f01a0e2f5d64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 480,
        "contract": "contracts/CreateToken/Meter/CreateVerify.sol:CreateManage",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 482,
        "contract": "contracts/CreateToken/Meter/CreateVerify.sol:CreateManage",
        "label": "router_address",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 487,
        "contract": "contracts/CreateToken/Meter/CreateVerify.sol:CreateManage",
        "label": "tokens",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 490,
        "contract": "contracts/CreateToken/Meter/CreateVerify.sol:CreateManage",
        "label": "fee",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(feeInfo)478_storage"
      },
      {
        "astId": 493,
        "contract": "contracts/CreateToken/Meter/CreateVerify.sol:CreateManage",
        "label": "standardTokenFactory",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(StandardTokenFactory)4291"
      },
      {
        "astId": 496,
        "contract": "contracts/CreateToken/Meter/CreateVerify.sol:CreateManage",
        "label": "liquidityTokenFactory",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(LiquidityTokenFactory)3399"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(LiquidityTokenFactory)3399": {
        "encoding": "inplace",
        "label": "contract LiquidityTokenFactory",
        "numberOfBytes": "20"
      },
      "t_contract(StandardTokenFactory)4291": {
        "encoding": "inplace",
        "label": "contract StandardTokenFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_struct(feeInfo)478_storage": {
        "encoding": "inplace",
        "label": "struct CreateManage.feeInfo",
        "members": [
          {
            "astId": 467,
            "contract": "contracts/CreateToken/Meter/CreateVerify.sol:CreateManage",
            "label": "normal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 469,
            "contract": "contracts/CreateToken/Meter/CreateVerify.sol:CreateManage",
            "label": "mint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 471,
            "contract": "contracts/CreateToken/Meter/CreateVerify.sol:CreateManage",
            "label": "burn",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 473,
            "contract": "contracts/CreateToken/Meter/CreateVerify.sol:CreateManage",
            "label": "pause",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 475,
            "contract": "contracts/CreateToken/Meter/CreateVerify.sol:CreateManage",
            "label": "blacklist",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 477,
            "contract": "contracts/CreateToken/Meter/CreateVerify.sol:CreateManage",
            "label": "deflation",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}